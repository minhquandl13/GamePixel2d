1
00:00:00,240 --> 00:00:06,799
hi guys, this is RyiSnow

2
00:00:03,439 --> 00:00:08,720
from this video, i will start a 2d game tutorial in Java

3
00:00:06,799 --> 00:00:14,920
this is something i've been wanting to do for quite a while

5
00:00:11,679 --> 00:00:18,000
so i'm happy that i can finally start this

6
00:00:14,920 --> 00:00:27,439
compared to other game tutorials that i have done before such as the text based adventure game,

9
00:00:24,320 --> 00:00:31,679
2D game development is a bit more complicated and requires a bit more work

11
00:00:28,960 --> 00:00:34,320
so i will do my best to make this as easy as possible

12
00:00:31,679 --> 00:00:40,719
so you can follow the steps even if you have no experience of developing 2D games

15
00:00:39,680 --> 00:00:45,920
i'm very happy if you enjoy it

17
00:00:43,440 --> 00:00:52,160
for this one, we will not use any external libraries

19
00:00:49,039 --> 00:00:57,280
we will just use the default Java classes and make it from the scratch

21
00:00:54,719 --> 00:01:00,320
so if you have an environment to write Java code, you can make this game

23
00:00:59,280 --> 00:01:06,720
and here's the roadmap of this tutorial

25
00:01:03,600 --> 00:01:11,360
first, we make a relatively simple treasure hunting game

27
00:01:08,799 --> 00:01:18,080
by creating this, you can learn how to create a game loop which is the core of 2D game development

29
00:01:14,960 --> 00:01:26,560
and also how to display characters, background tiles, item objects on the screen

32
00:01:23,840 --> 00:01:32,960
and you can also learn how to move player character on the screen

34
00:01:29,759 --> 00:01:38,840
and after completing this first game we will add more elements to this

36
00:01:35,759 --> 00:01:47,360
and change it to a 2D action RPG, kind of like the retro style Zelda

38
00:01:43,040 --> 00:01:55,040
we will add monsters, NPCs, dialogues, inventory, and some events

41
00:01:51,520 --> 00:01:59,119
that's the final goal of this tutorial

42
00:01:55,040 --> 00:02:01,439
this is a tutorial for Java 2D beginners

43
00:01:59,119 --> 00:02:08,319
so i will explain many things such as how the game loop works, etc.

45
00:02:04,799 --> 00:02:14,640
so if you already have some knowledge of 2D game programming

47
00:02:11,039 --> 00:02:17,040
you probably feel the pacing is a bit slow

49
00:02:16,160 --> 00:02:21,520
but please bear with me

51
00:02:18,640 --> 00:02:30,000
everyone is beginner at first and someone else might find these explanations useful

54
00:02:26,640 --> 00:02:34,840
okay, so that's the introduction and now let's start the development

56
00:02:32,560 --> 00:02:38,879
let's make a new project

58
00:02:36,480 --> 00:02:45,120
i'm gonna name this My2DGame

60
00:02:40,879 --> 00:02:48,800
it's like the most generic name ever but it's okay

62
00:02:46,959 --> 00:02:52,959
and don't create this

63
00:02:48,800 --> 00:02:58,159
and let's create a package first and name this "main"

65
00:02:55,440 --> 00:03:02,760
and create a class

66
00:02:58,159 --> 00:03:02,760
let's create Main class

68
00:03:06,720 --> 00:03:12,800
so first we create a window

70
00:03:10,239 --> 00:03:14,159
so we use this JFrame class

77
00:03:32,799 --> 00:03:38,319
so we can close this window properly

78
00:03:35,280 --> 00:03:43,120
and also we add...

80
00:03:40,720 --> 00:03:48,640
so we cannot resize this window

82
00:03:45,120 --> 00:03:52,000
then let's set the game title

84
00:03:52,080 --> 00:04:02,720
so... "2D adventure" or something

92
00:04:08,799 --> 00:04:16,720
so window is gonna be displayed at the center of the screen

96
00:04:18,560 --> 00:04:26,240
so we can see this window

97
00:04:21,440 --> 00:04:26,240
okay now let's create another class

98
00:04:27,040 --> 00:04:32,320
and i'm gonna name this GamePanel

100
00:04:33,199 --> 00:04:40,160
and this GamePanel extends JPanel

103
00:04:41,520 --> 00:04:50,639
so basically this is a subclass of this JPanel

105
00:04:47,360 --> 00:04:53,759
so this has all the functions of this JPanel

106
00:04:50,639 --> 00:04:58,000
this GamePanel works as a kind of a game screen

108
00:04:55,759 --> 00:05:07,440
so first we're gonna decide some screen settings

112
00:05:03,919 --> 00:05:08,479
and create some variables here

117
00:05:14,479 --> 00:05:18,639
and i'm going to choose 16

118
00:05:19,520 --> 00:05:28,880
so this means 16 by 16 tile 

119
00:05:25,039 --> 00:05:36,000
and this 16 by 16 is gonna be the default size of the player character, NPCs and map tiles in this game

121
00:05:32,160 --> 00:05:42,800
16 by 16 is kind of a standard size for many retro 2D games 

123
00:05:39,520 --> 00:05:46,000
and many characters and tiles are made with this size

124
00:05:42,800 --> 00:05:48,639
so you can find many examples

125
00:05:46,000 --> 00:05:56,639
some games use more pixels such as 32 by 32 to draw a character

127
00:05:52,160 --> 00:05:59,840
but we go with 16 pixels this time

128
00:05:56,639 --> 00:06:00,800
that said there is a little catch here

129
00:05:59,840 --> 00:06:15,840
since modern computers and monitors have much higher resolutions than those eras of NES or SNES, you know, 80s, 90s

133
00:06:10,800 --> 00:06:23,240
so 16 by 16 characters or tiles look very small on the screen

136
00:06:17,759 --> 00:06:30,479
for example, the NES's resolution was 256 by 224

138
00:06:24,960 --> 00:06:31,199
and the GENESIS was 320 by 224

139
00:06:30,479 --> 00:06:39,680
so 16 by 16 characters looked a decent size in those settings

142
00:06:37,039 --> 00:06:43,120
but i'm sure your monitor has much higher resolution than that

143
00:06:39,680 --> 00:06:45,199
then what to do?

144
00:06:43,120 --> 00:06:48,800
we will scale it

145
00:06:45,199 --> 00:06:52,400
so let's create an integer variable

147
00:06:52,400 --> 00:06:58,880
and i'm going to set 3

148
00:06:55,120 --> 00:07:02,880
although we create characters in a 16 by 16 frame

149
00:06:58,880 --> 00:07:10,080
but it looks 48 by 48 pixels on the screen

152
00:07:07,120 --> 00:07:17,360
this kind of scaling is pretty common for developing retro style 2D games

154
00:07:14,240 --> 00:07:21,280
so we also follow the tradition

155
00:07:17,360 --> 00:07:23,520
so another integer

163
00:07:33,599 --> 00:07:42,560
so basically this is 48 x 48 tile

165
00:07:39,199 --> 00:07:48,080
so this is the actual tile size that will be displayed on our game screen

167
00:07:44,960 --> 00:07:51,120
and then we decide the size of our game screen

168
00:07:48,080 --> 00:08:02,720
and to do that we first decide how many tiles the game can display both horizontally and vertically

172
00:07:59,199 --> 00:08:05,759
and this will decide the total screen size

177
00:08:09,440 --> 00:08:15,440
in this game we choose 16 column

183
00:08:24,720 --> 00:08:31,680
and row is 12

185
00:08:28,720 --> 00:08:35,279
16 tiles horizontally, 12 tiles vertically

186
00:08:31,680 --> 00:08:40,959
so the ratio is 4 to 3

188
00:08:38,000 --> 00:08:43,839
and since a single tile size is 48 pixels

207
00:09:14,560 --> 00:09:21,839
so tile size is 48

213
00:09:30,800 --> 00:09:35,040
and the height is...

220
00:09:44,240 --> 00:09:50,000
so this will be the size of our game screen

221
00:09:47,600 --> 00:09:52,800
but of course you can change it if you want

225
00:09:54,080 --> 00:10:00,959
18 or 14 or something

228
00:10:01,040 --> 00:10:07,920
then this screen width the screen height will change automatically

230
00:10:06,000 --> 00:10:11,040
so that's the screen setting

231
00:10:07,920 --> 00:10:16,040
now let's create a constructor of this GamePanel

240
00:10:35,680 --> 00:10:41,519
so we're gonna set the panel size of this GamePanel

242
00:10:40,000 --> 00:10:47,640
so screen width and screen height

245
00:10:49,600 --> 00:10:57,360
and then i'm not sure if this is necessary but...

247
00:10:54,640 --> 00:11:03,720
let's set the background color of this GamePanel

254
00:11:15,120 --> 00:11:23,600
if you have experience of developing 2D games in Java before

255
00:11:17,760 --> 00:11:28,320
and if you have used Canvas to draw the screen 

258
00:11:24,959 --> 00:11:29,839
then you probably use BufferStrategy too

259
00:11:28,320 --> 00:11:32,560
but this time we're gonna use this JPanel

260
00:11:29,839 --> 00:11:38,320
this JPanel has kind of a double buffering function as default

262
00:11:36,079 --> 00:11:46,079
so i think it's a good idea to make this true for better rendering performance

265
00:11:44,079 --> 00:11:52,720
okay now let's go back to this Main class

267
00:11:48,000 --> 00:11:52,720
and add this GamePanel to this window

272
00:12:02,399 --> 00:12:08,560
and we're gonna add this gamePanel to this window

275
00:12:12,000 --> 00:12:17,360
this is a subclass of JPanel

276
00:12:14,880 --> 00:12:23,760
so basically this is a JPanel class with a bit more extra functions

278
00:12:20,800 --> 00:12:29,360
so you can add this window like you add JPanel to this window

280
00:12:26,639 --> 00:12:39,839
and then we're gonna pack this JPanel so we can see it

284
00:12:37,200 --> 00:12:41,760
okay let's check it

285
00:12:39,839 --> 00:12:42,560
alright

286
00:12:41,760 --> 00:12:47,360
so our game screen appears

288
00:12:45,120 --> 00:12:53,279
and the size is 768 and 576

291
00:12:49,800 --> 00:13:03,600
so we can display a 16 48x48 tiles horizontally

294
00:12:58,480 --> 00:13:06,480
and 12 48x48 tiles vertically

295
00:13:03,600 --> 00:13:13,040
now we have a window so let's talk about the basic mechanics of the game

297
00:13:09,839 --> 00:13:22,079
i think the most important concept of 2D game is existence of time

300
00:13:19,519 --> 00:13:25,279
in my previous text adventure game

301
00:13:22,079 --> 00:13:29,040
when you do something, for example, press the button

303
00:13:26,399 --> 00:13:34,959
then program do some processing and then stops

305
00:13:32,639 --> 00:13:39,839
it just wait until you do something again like pressing the button again

307
00:13:38,560 --> 00:13:47,440
however, in 2D games, once you start the program the program keeps running

309
00:13:43,760 --> 00:13:57,760
and doesn't stop until most likely you close the game or you do something special

312
00:13:54,880 --> 00:14:07,920
so imagine, when you play games like Super Mario or Minecraft or Call of Duty or any other action oriented games

315
00:14:05,760 --> 00:14:12,639
you can move your character on the screen

317
00:14:09,760 --> 00:14:18,560
and other characters such as monsters or NPCs are also moving on the screen

319
00:14:17,760 --> 00:14:23,680
but how can this happen?

321
00:14:20,240 --> 00:14:31,120
its mechanics is basically the same with hand drawn animation

323
00:14:27,040 --> 00:14:33,760
the character is actually a series of static pictures

324
00:14:31,120 --> 00:14:37,600
but since it updates the pictures really quickly

326
00:14:34,720 --> 00:14:40,079
it looks like the character is moving

327
00:14:37,600 --> 00:14:43,920
it's the same in video games

328
00:14:40,079 --> 00:14:47,040
so if the game's FPS is 60

329
00:14:43,920 --> 00:14:50,639
which means it updates the screen 60 times per second

331
00:14:48,240 --> 00:14:58,160
so your character looks like moving but it's actually a series of 60 static images

334
00:14:55,360 --> 00:15:04,880
so to do this animation in our game we need to create a time in our game

336
00:15:01,760 --> 00:15:08,079
so we need to start this game clock

337
00:15:04,880 --> 00:15:17,440
and to do that we will use a class called Thread

340
00:15:13,120 --> 00:15:21,600
and i will name this gameThread

341
00:15:17,440 --> 00:15:22,880
Thread is something you can start and stop

342
00:15:21,600 --> 00:15:30,560
and once a thread started, it keeps your program running until you stop it

346
00:15:28,160 --> 00:15:36,160
it's not like thread itself does something special 

348
00:15:33,440 --> 00:15:40,160
but when you want to repeat some process again and again

350
00:15:37,279 --> 00:15:45,920
such as drawing screen 60 times every one second, thread is very useful

352
00:15:43,360 --> 00:15:49,120
so we're gonna use this thread in this GamePanel

353
00:15:45,920 --> 00:15:59,440
and to run a thread we need to implement Runnable to this class

356
00:15:56,880 --> 00:16:02,959
that's the key to use this thread

358
00:16:01,680 --> 00:16:07,360
and we are seeing an error

360
00:16:05,120 --> 00:16:14,639
it's suggesting to add unimplemented methods so let's do this

362
00:16:11,120 --> 00:16:17,120
then it automatically generates this run method

364
00:16:17,920 --> 00:16:24,399
so what is this run method is

365
00:16:20,839 --> 00:16:25,199
probably you can see this explanation

367
00:16:25,199 --> 00:16:30,399
it says,

368
00:16:27,680 --> 00:16:39,519
"when an object implementing interface Runnable, in this case our GamePanel, is used to create a thread"

371
00:16:36,720 --> 00:16:47,360
"starting the thread causes the object's run method to be called in that separatory execution thread"

374
00:16:44,320 --> 00:16:52,959
so basically when we start this gameThread it automatically calls this run method

376
00:16:50,399 --> 00:16:56,399
that's how it works

377
00:16:52,959 --> 00:17:01,759
okay so i'm gonna create a new method here

381
00:17:06,240 --> 00:17:10,319
and here

382
00:17:07,679 --> 00:17:12,160
so we're gonna instantiate this gameThread

388
00:17:17,600 --> 00:17:27,919
and we're gonna pass "this" to this thread constructor

392
00:17:25,360 --> 00:17:30,400
so "this" means this class, so GamePanel 

393
00:17:27,919 --> 00:17:35,679
so basically we are passing GamePanel class to this thread's constructor

395
00:17:33,039 --> 00:17:37,360
that's how you instantiate a thread

397
00:17:37,360 --> 00:17:44,400
let's start this thread

399
00:17:44,400 --> 00:17:50,960
it's gonna automatically call this run method

402
00:17:51,600 --> 00:18:12,550
and in this run method, we will create a game loop which will be the core of our game

406
00:18:00,710 --> 00:18:12,550
[Music]

