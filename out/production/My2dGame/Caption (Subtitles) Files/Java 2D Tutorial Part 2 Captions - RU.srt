1
00:00:00,160 --> 00:00:10,240
в этом методе мы создадим игровой цикл, который будет ядром нашей игры

3
00:00:07,200 --> 00:00:12,240
Итак, сначала мы создадим этот цикл while

7
00:00:20,640 --> 00:00:25,439
это значит

8
00:00:21,920 --> 00:00:29,199
до тех пор, пока существует этот gameThread (игровой поток)

9
00:00:25,439 --> 00:00:33,520
он повторяет процесс, который записан внутри этих скобок

11
00:00:31,679 --> 00:00:36,079
так что для проверки этого

12
00:00:33,520 --> 00:00:37,600
давайте отобразим несколько текстов

18
00:00:45,280 --> 00:00:49,920
и хорошо, давайте вызовем этот метод

19
00:00:50,160 --> 00:00:52,480
может быть отсюда

23
00:00:59,840 --> 00:01:02,960
хорошо, давайте проверим

25
00:01:07,520 --> 00:01:12,960
как вы можете видеть

26
00:01:09,360 --> 00:01:17,920
программа повторяет этот процесс

28
00:01:15,119 --> 00:01:20,240
это просто тестирование, но в реальной игре

29
00:01:17,920 --> 00:01:22,040
есть две вещи, которые мы собираемся сделать в этом цикле

31
00:01:22,280 --> 00:01:26,040
первая - обновление

38
00:01:39,840 --> 00:01:43,840
другая

44
00:01:55,520 --> 00:02:00,799
например

45
00:01:57,119 --> 00:02:08,479
допустим, ваш персонаж игрока находится в точке x 100 и y 100 на экране

47
00:02:05,360 --> 00:02:12,480
если игрок нажмет клавишу вниз, что должно заставить персонажа игрока опуститься вниз

49
00:02:11,200 --> 00:02:20,120
так что, возможно, мы добавим 3 к координате y

51
00:02:17,360 --> 00:02:23,760
таким образом, координата y игрока теперь равна 103

52
00:02:20,120 --> 00:02:30,959
и это означает, что мы обновили информацию об игроке

54
00:02:27,520 --> 00:02:33,280
тогда на основе этой обновленной информации

55
00:02:30,959 --> 00:02:37,040
мы перерисовываем экран

56
00:02:33,280 --> 00:02:43,599
теперь мы рисуем персонажа игрока в точках x 100 и y 103

58
00:02:40,560 --> 00:02:46,080
так что если игрок продолжает нажимать клавишу вниз

59
00:02:43,599 --> 00:02:55,519
мы продолжаем обновлять координаты y персонажа, например 106 109 112 115

61
00:02:52,640 --> 00:03:02,000
и перерисовываем персонажа с обновленными координатами

63
00:02:58,640 --> 00:03:08,720
повторяем это. проверяем обновление и перерисовываем экран

65
00:03:04,400 --> 00:03:11,920
и если мы установим fps в игре равным 30

66
00:03:08,720 --> 00:03:18,720
тогда мы сделаем это обновление и будем рисовать 30 раз в секунду

68
00:03:14,239 --> 00:03:23,120
и если fps равен 60, мы делаем это 60 раз в секунду

70
00:03:19,920 --> 00:03:27,840
для обновления и рисования мы создаем два метода

72
00:03:24,879 --> 00:03:30,400
один из них называется update

74
00:03:30,720 --> 00:03:38,879
а другой - paintComponent


76
00:03:40,959 --> 00:03:52,319
Этот paintComponent на самом деле встроенный метод в java, так что это не мое оригинальное имя или что-то такое.

78
00:03:46,879 --> 00:03:56,319
Так что это один из стандартных методов рисования на Jpanel

81
00:03:54,080 --> 00:04:00,560
Есть и другие способы рисования, но в этот раз мы будем использовать этот paintComponent

83
00:03:59,680 --> 00:04:08,319
и мы также используем этот класс Graphics

85
00:04:04,319 --> 00:04:08,319
так что мы получаем Graphics g

86
00:04:10,480 --> 00:04:15,040
и затем добавляем эту строку

90
00:04:18,400 --> 00:04:27,360
так что это просто формат, когда вы используете этот метод paintComponent на Jpanel

93
00:04:25,280 --> 00:04:30,080
вам нужно набрать это

94
00:04:27,360 --> 00:04:35,680
Этот super означает родительский класс этого класса

96
00:04:32,639 --> 00:04:38,320
и в данном случае родительским классом является Jpanel

97
00:04:35,680 --> 00:04:41,360
потому что наш GamePanel является подклассом Jpanel

98
00:04:38,320 --> 00:04:46,800
это практика, установленная java для того, чтобы это работало

100
00:04:43,600 --> 00:04:50,160
Итак, мы создали этот методы update и paintComponent

101
00:04:46,800 --> 00:04:52,800
теперь давайте вернемся к нашему игровому циклу

103
00:04:51,600 --> 00:04:58,160
и вызовем эти два метода

105
00:04:54,400 --> 00:05:00,000
сначала напишем update()

106
00:04:58,160 --> 00:05:02,800
а затем repaint()

108
00:05:03,680 --> 00:05:09,120
не paintComponent, а repaint

110
00:05:07,280 --> 00:05:11,440
немного запутано

111
00:05:09,120 --> 00:05:15,039
но вот так и вызывается метод paintComponent

113
00:05:13,840 --> 00:05:21,680
так что теперь, пока этот игровой цикл продолжается

115
00:05:18,160 --> 00:05:24,080
он продолжает вызывать update (обновить) и repaint (перерисовать)

116
00:05:21,680 --> 00:05:28,720
обновление и перерисовка, обновление и перерисовка

118
00:05:25,600 --> 00:05:32,080
давайте нарисуем что-нибудь на экране

119
00:05:28,720 --> 00:05:36,080
и чтобы нарисовать что-то, мы используем этот paintComponent

121
00:05:33,199 --> 00:05:39,680
и этот класс Graphics

122
00:05:36,080 --> 00:05:44,240
Так что представьте, что этот Graphics - это ваш карандаш или кисть.

125
00:05:41,840 --> 00:05:45,360
и прежде чем использовать Graphics 

126
00:05:44,240 --> 00:05:52,800
мы собираемся преобразовать этот Graphics в класс Graphics2D

135
00:06:00,880 --> 00:06:10,960
Это означает, что мы преорабузем Graphics g в класс Graphics2D

138
00:06:07,840 --> 00:06:14,160
Graphics и Graphics2D в некотором роде похожи

139
00:06:10,960 --> 00:06:21,759
но у Graphics2D немного больше функций, поэтому мы можем использовать ее и рисовать всякие штуки

142
00:06:19,280 --> 00:06:29,120
но в этот раз мы будем использовать класс Graphics, потому что он имеет некоторые функции, которые я хочу использовать позже

145
00:06:27,680 --> 00:06:33,360
Итак, сначала установим цвет.

152
00:06:39,759 --> 00:06:45,919
сейчас мы будем использовать белый цвет

154
00:06:43,120 --> 00:06:48,479
затем нарисуем прямоугольник на экране

160
00:06:53,120 --> 00:07:00,000
метод fillRect нарисует прямоугольник на экране

162
00:06:58,080 --> 00:07:03,840
и когда вы рисуете что-то на экране

163
00:07:00,000 --> 00:07:10,319
Graphics или Graphics2D спрашивает у вас координаты x и y.

165
00:07:07,440 --> 00:07:15,759
а также ширину и высоту объекта, то есть прямоугольника

167
00:07:13,280 --> 00:07:22,560
так что, допустим, x - 100 и y - 100

170
00:07:20,800 --> 00:07:23,440
и ширина

172
00:07:23,440 --> 00:07:32,000
на данный момент мы будем использовать это в качестве персонажа игрока

174
00:07:29,360 --> 00:07:37,759
поэтому давайте использовать размер плитки

176
00:07:34,080 --> 00:07:37,759
так что 48 на 48

177
00:07:38,319 --> 00:07:47,520
ширина - размер плитки, а высота - тоже размер плитки

179
00:07:42,880 --> 00:07:47,520
и когда рисунок закончен

180
00:07:48,400 --> 00:07:53,759
мы утилизируем эту Graphics2D

182
00:07:51,840 --> 00:07:56,400
программа работает и без этой строки

183
00:07:53,759 --> 00:08:01,440
но это хорошая практика, чтобы сэкономить немного памяти

184
00:07:56,400 --> 00:08:01,440
так что да, хорошо, давайте посмотрим

186
00:08:04,080 --> 00:08:17,599
Итак, мы нарисовали прямоугольник 48 x 48 белого цвета в точках x 100 и y 100

191
00:08:14,479 --> 00:08:22,960
Так что мы можем рисовать, используя Graphics2D

193
00:08:19,360 --> 00:08:27,840
теперь мы хотим перемещать или управлять этим прямоугольником

195
00:08:25,120 --> 00:08:31,880
и для этого нам нужно принять ввод с клавиатуры

196
00:08:27,840 --> 00:08:41,440
чтобы когда игрок нажимает клавиши wasd, прямоугольник перемещался вверх, вниз, влево или вправо.

199
00:08:38,640 --> 00:08:46,160
давайте создадим еще один класс для обработки этого ввода клавиш

201
00:08:43,519 --> 00:08:48,560
внутри пакета main

202
00:08:46,160 --> 00:08:53,120
создадим класс и назовем его KeyHandler

211
00:09:06,959 --> 00:09:15,760
и затем да, он просит вас добавить эти нереализованные методы

214
00:09:13,519 --> 00:09:18,480
keyTyped, keyPressed и keyReleased

215
00:09:15,760 --> 00:09:25,200
всякий раз, когда вы реализуете этот KeyListener, вы должны добавить эти три метода

218
00:09:23,120 --> 00:09:31,440
и мы не будем использовать keyTyped

221
00:09:29,519 --> 00:09:37,000
мы воспользуемся только keyPressed и keyReleased

227
00:09:44,080 --> 00:09:54,880
e.getKeyCode возвращает номер клавиши, которая была нажата

230
00:09:51,839 --> 00:09:56,080
и мы собираемся проверить..

234
00:10:02,640 --> 00:10:09,600
это означает, что если пользователь нажмет клавишу w

235
00:10:07,839 --> 00:10:15,440
тогда давайте добавим еще три

242
00:10:19,839 --> 00:10:26,240
а также создадим несколько булевых переменных.

263
00:11:08,480 --> 00:11:14,880
Да, на этом пока все.

264
00:11:11,200 --> 00:11:17,519
Давайте разберемся с keyReleased

265
00:11:14,880 --> 00:11:18,800
Итак, сначала мы получим код нажатой клавиши

270
00:11:23,279 --> 00:11:30,000
Хорошо, давайте скопируем его и вставим

272
00:11:28,959 --> 00:11:37,519
теперь это не нажатая клавиша, а отпущенная, так что

274
00:11:33,040 --> 00:11:39,920
если нажатая клавиша была w, то upPressed будет false

278
00:11:44,720 --> 00:11:49,200
и это также ложно

279
00:11:47,519 --> 00:11:50,480
не ложно

282
00:11:51,920 --> 00:12:01,680
Да, на этом пока все с KeyHandler.

285
00:11:58,000 --> 00:12:01,680
так что давайте вернемся к GamePanel

286
00:12:02,639 --> 00:12:08,079
мы собираемся инстанцировать наш KeyHandler

290
00:12:16,720 --> 00:12:26,079
и добавим этот KeyHandler к GamePanel

295
00:12:29,519 --> 00:12:39,120
чтобы эта игровая панель могла распознавать ввод клавиш

297
00:12:34,399 --> 00:12:40,560
и также мы добавляем еще одну строку

304
00:12:49,200 --> 00:12:54,880
мы создадим несколько переменных

316
00:13:10,320 --> 00:13:16,880
а также определим скорость игрока

318
00:13:17,120 --> 00:13:23,920
и я собираюсь установить четыре

319
00:13:21,040 --> 00:13:26,240
затем мы переходим к методу paintComponent

322
00:13:26,240 --> 00:13:31,360
вместо этого 100 100

323
00:13:29,360 --> 00:13:41,440
мы напечатаем playerX и playerY здесь

327
00:13:36,720 --> 00:13:48,800
Теперь это не фиксированные числа, а переменные, поэтому мы можем менять положение игрока

330
00:13:45,760 --> 00:13:50,240
так где мы меняем позицию игрока?

331
00:13:48,800 --> 00:13:54,720
мы собираемся сделать это внутри этого обновления

337
00:14:03,279 --> 00:14:10,880
Итак, keyH означает этот обработчик клавиш (KeyHandler)

338
00:14:06,720 --> 00:14:12,880
так что если это нажатие истинно

339
00:14:10,880 --> 00:14:19,360
то мы хотим, чтобы персонаж игрока поднялся вверх.

345
00:14:24,399 --> 00:14:31,760
-= или вы также можете напечатать вот так

348
00:14:39,760 --> 00:14:46,000
это то же самое, это своего рода короткий способ напечатать

349
00:14:42,880 --> 00:14:50,639
мы вычитаем скорость этого игрока из координаты y этого игрока

355
00:15:00,399 --> 00:15:05,760
все будет наоборот, так что

374
00:15:44,639 --> 00:15:51,759
так что в этом случае скорость игрока 4 означает 4 пикселя

376
00:15:49,759 --> 00:15:59,600
поэтому когда пользователь нажимает клавишу вниз или s

378
00:15:56,480 --> 00:16:04,720
то координата y игрока увеличивается на 4 пикселя

380
00:16:00,800 --> 00:16:08,880
Итак, каждый раз, когда игрок нажимает эти клавиши

381
00:16:04,720 --> 00:16:11,360
ввод клавиш перехватывается обработчиком клавиш (KeyHandler)

382
00:16:08,880 --> 00:16:15,600
и этот метод update обновляет координаты игрока

384
00:16:14,240 --> 00:16:22,560
и затем после обновления вызовется paintComponent

387
00:16:19,920 --> 00:16:30,959
и этот компонент рисует прямоугольник с обновленными позициями игрока x и y

390
00:16:28,160 --> 00:16:33,680
но все еще есть проблема

391
00:16:30,959 --> 00:16:35,600
я покажу вам, что происходит прямо сейчас

394
00:16:36,720 --> 00:16:42,880
Итак, если я нажму, например, клавишу s

397
00:16:42,880 --> 00:16:51,040
то прямоугольник просто исчезает, когда я нажимаю клавишу

399
00:16:46,959 --> 00:16:54,079
Позвольте мне объяснить, что только что произошло

400
00:16:51,040 --> 00:17:02,399
мы создали этот игровой цикл, который повторяет обновление и перерисовку.

403
00:16:58,560 --> 00:17:09,600
но поскольку мы не задали никакого конкретного интервала между каждым обновлением и перерисовкой

405
00:17:06,000 --> 00:17:14,240
поэтому ваш компьютер выполняет этот процесс так быстро, как только может

407
00:17:11,679 --> 00:17:17,120
Так как мы сейчас рисуем простой прямоугольник. 

408
00:17:14,240 --> 00:17:23,360
это совсем не тяжело для современных компьютеров cpu

410
00:17:20,319 --> 00:17:29,760
так что, вероятно, он может повторять процесс миллионы раз в секунду

413
00:17:26,319 --> 00:17:32,960
Так что когда мы запускаем эту программу и нажимаем клавишу вниз

414
00:17:29,760 --> 00:17:38,559
прямоугольник перемещается на несколько миллионов пикселей в течение секунды.

416
00:17:36,160 --> 00:17:43,919
и поскольку это окно имеет всего несколько сотен пикселей в ширину и высоту

418
00:17:40,799 --> 00:17:46,559
поэтому прямоугольник быстро вышел из рамки

419
00:17:43,919 --> 00:17:50,960
и поэтому казалось, что прямоугольник просто исчез.

421
00:17:50,160 --> 00:17:59,919
Так что нам нужно установить своего рода ограничение.

424
00:17:56,240 --> 00:18:03,520
мы указываем программе мол: 

425
00:17:59,919 --> 00:18:10,480
"эй, притормози, просто обновляй и рисуй экран 60 раз в секунду и не больше"

427
00:18:07,280 --> 00:18:14,880
и чтобы сделать это, сначала нам нужно узнать, сколько сейчас времени

429
00:18:11,679 --> 00:18:17,600
затем нам также нужно знать, сколько времени прошло

430
00:18:14,880 --> 00:18:23,360
между этим моментом и моментом после обновления и перерисовки

432
00:18:20,240 --> 00:18:29,840
поэтому без этой информации мы не можем сказать нашей программе, когда обновлять или перерисовывать

435
00:18:30,960 --> 00:18:36,400
И чтобы проверить текущее время, мы набираем вот так

443
00:18:45,200 --> 00:18:52,320
поэтому мы будем использовать наносекунды для проверки текущего системного времени

445
00:18:50,240 --> 00:19:02,559
Итак, нано - это очень маленькая единица, то есть 1 миллиард наносекунд равен 1 секунде.

448
00:18:59,840 --> 00:19:02,559
мы также можем использовать и этот

449
00:19:08,960 --> 00:19:17,120
он возвращает текущее время в миллисекундах

451
00:19:15,120 --> 00:19:21,039
это тоже нормально

452
00:19:17,120 --> 00:19:21,039
но нано более точен

453
00:19:21,600 --> 00:19:26,880
так что позвольте мне показать вам пример

456
00:19:30,400 --> 00:19:33,200
отобразим текущее время

458
00:19:36,960 --> 00:19:39,840
хорошо, давайте проверим

460
00:19:44,720 --> 00:19:53,760
ух ты, так это текущее системное время в наносекундах

462
00:19:50,799 --> 00:19:56,480
как вы можете видеть, время увеличивается

463
00:19:53,760 --> 00:20:00,960
Поэтому, когда нам нужно проверить текущее время, мы можем сделать это, набрав вот так

465
00:20:04,400 --> 00:20:13,200
далее давайте установим fps для нашей игры

466
00:20:10,000 --> 00:20:19,760
и я думаю, что 60 fps - это достаточно прилично, поэтому мы выбираем это.

469
00:20:17,679 --> 00:20:21,919
после этого

474
00:20:29,440 --> 00:20:33,080
давайте удалим это

475
00:20:36,080 --> 00:20:43,039
теперь немного сложная часть

476
00:20:39,440 --> 00:20:47,520
как создать это ограничение, чтобы добиться 60fps?

478
00:20:45,679 --> 00:20:54,400
есть несколько способов создать достойную игровую группу

480
00:20:51,120 --> 00:20:57,919
и я представлю здесь два популярных из них

481
00:20:54,400 --> 00:21:02,880
оба являются устоявшимися методами и широко используются

483
00:20:58,960 --> 00:21:05,679
я протестировал оба метода и подтвердил, что оба работают нормально

484
00:21:02,880 --> 00:21:10,240
так что вы можете выбрать любой из них

486
00:21:07,440 --> 00:21:14,840
давайте начнем с первого. я вызову метод sleep

488
00:21:12,000 --> 00:21:19,760
Итак, сначала мы создадим переменные вне этого цикла while

495
00:21:26,880 --> 00:21:34,000
делим на fps

496
00:21:30,799 --> 00:21:37,679
Да, вау, это много нулей на самом деле

497
00:21:34,000 --> 00:21:42,880
здесь девять нулей, так что это один миллиард, а это означает одну секунду

500
00:21:40,640 --> 00:21:47,120
мы используем наносекунды в качестве единицы расчета в этом игровом цикле

502
00:21:45,760 --> 00:21:53,360
так что здесь это одна секунда, но также и один миллиард наносекунд

505
00:21:51,280 --> 00:22:01,440
может быть, сначала это немного непонятно, но это все для точного расчета

508
00:21:58,640 --> 00:22:08,720
Итак, мы делим одну секунду или один миллиард наносекунд на 60

511
00:22:05,760 --> 00:22:15,520
то есть один два три четыре пять шесть семь делим на шестьдесят

514
00:22:13,919 --> 00:22:22,480
равно шестнадцать миллионов

516
00:22:17,600 --> 00:22:23,280
шесть-шесть-шесть наносекунд или

517
00:22:22,480 --> 00:22:29,919
так что один делится на шестьдесят

519
00:22:25,840 --> 00:22:32,240
это одно и то же, так что 0.01666 секунды

520
00:22:29,919 --> 00:22:34,960
так что это интервал рисования

521
00:22:32,240 --> 00:22:42,159
это означает, что мы рисуем экран каждые 0,016 секунды

523
00:22:37,960 --> 00:22:46,159
Таким образом, мы можем рисовать экран 60 раз в секунду

527
00:22:53,200 --> 00:22:58,080
и затем следующая переменная

538
00:23:10,640 --> 00:23:19,600
Итак, как мы делали ранее, этот System.nanoTime() возвращает текущее системное время

541
00:23:17,280 --> 00:23:25,760
Так что, допустим, если мы просто нарисуем экран прямо сейчас.

543
00:23:22,799 --> 00:23:34,400
то следующее время рисования будет текущим временем плюс этот интервал рисования

546
00:23:30,480 --> 00:23:35,120
то есть на 0,016 секунды позже

547
00:23:34,400 --> 00:23:40,159
чтобы мы могли рассказать нашей программе 

549
00:23:37,360 --> 00:23:46,400
когда ваше внутреннее системное время достигнет этого времени, тогда снова нарисуйте экран

554
00:23:46,400 --> 00:23:55,360
и после установки этого следующего времени рисования начинается цикл игры

556
00:23:52,159 --> 00:23:59,440
и программа выполняет обновление и перерисовку

558
00:23:57,600 --> 00:24:10,159
и в этот момент, так что должно пройти некоторое время с этого момента

563
00:24:07,279 --> 00:24:13,360
поэтому нам нужно знать, что

564
00:24:10,159 --> 00:24:15,120
после этого обновления и перекраски

565
00:24:13,360 --> 00:24:20,559
сколько времени осталось до следующей перерисовки

568
00:24:18,559 --> 00:24:21,919
так что давайте проверим это

577
00:24:33,760 --> 00:24:40,880
вычитаем текущее время из времени следующего рисования.

578
00:24:37,520 --> 00:24:47,360
Таким образом, мы получаем количество времени, оставшегося до следующего рисования

580
00:24:44,559 --> 00:24:53,360
и нам нужно дать потоку поспать в течение оставшегося времени

582
00:24:49,919 --> 00:24:53,360
поэтому мы набираем вот так

588
00:25:04,000 --> 00:25:12,960
но поскольку этот метод сна принимает только long

590
00:25:10,080 --> 00:25:15,200
мы преобразуем это

591
00:25:12,960 --> 00:25:19,679
и также я думаю, что мы должны обернуть это в try catch

593
00:25:20,400 --> 00:25:29,840
и также мы собираемся переместить это оставшееся время в try catch

596
00:25:30,080 --> 00:25:36,880
Так что этот сон, по сути, приостанавливает игровой цикл

597
00:25:33,120 --> 00:25:41,279
так что игра ничего не будет делать, пока не закончится время сна

599
00:25:39,840 --> 00:25:46,640
но здесь есть еще одна загвоздка

601
00:25:43,360 --> 00:25:49,360
как вы можете видеть из этого описания

602
00:25:46,640 --> 00:25:53,679
этот метод sleep принимает число как миллисекунду

604
00:25:51,919 --> 00:25:58,400
и поскольку мы проводили эти вычисления с наносекундами

606
00:25:57,120 --> 00:26:06,400
нам нужно перевести оставшееся время из нано в миллисекунды.

612
00:26:16,480 --> 00:26:23,520
поэтому мы делим оставшееся время на миллион

614
00:26:20,799 --> 00:26:27,600
теперь мы можем принять это оставшееся время за миллисекунды

616
00:26:25,279 --> 00:26:29,760
да, это немного запутанно

617
00:26:27,600 --> 00:26:35,360
но вот как вы делаете, когда используете это nanotime и также этот метод сна

620
00:26:34,080 --> 00:26:39,679
также мы добавляем этот оператор if

630
00:26:52,960 --> 00:27:03,200
так что если это обновление перерисовки заняло больше, чем этот интервал рисования

632
00:27:00,080 --> 00:27:06,559
то времени не осталось

633
00:27:03,200 --> 00:27:09,600
этому потоку не нужно спать, так как мы уже использовали выделенное время

634
00:27:06,559 --> 00:27:13,600
поэтому мы ставим 0 на оставшееся время

636
00:27:11,200 --> 00:27:18,159
Я сомневаюсь, что это произойдет в нашей маленькой двухмерной игре, но на всякий случай

639
00:27:18,159 --> 00:27:22,000
и наконец

641
00:27:22,000 --> 00:27:29,440
когда время сна заканчивается и нить пробуждается

643
00:27:25,679 --> 00:27:36,720
мы установим новое время следующего розыгрыша

646
00:27:32,840 --> 00:27:39,919
так что, по сути, мы собираемся добавить интервал рисования

648
00:27:41,120 --> 00:27:52,000
что означает, что через 0,01666 секунды будет следующее время рисования

652
00:27:49,200 --> 00:27:55,039
Итак, я думаю, что этот цикл игры завершен

653
00:27:52,000 --> 00:27:55,039
так что давайте проверим это

654
00:27:56,159 --> 00:28:00,840
Хорошо, я собираюсь нажать клавишу s

655
00:28:00,000 --> 00:28:03,919
клавиша d

656
00:28:00,840 --> 00:28:07,200
w клавиша a клавиша

657
00:28:03,919 --> 00:28:09,919
это работает, так что наш игровой цикл работает прекрасно

658
00:28:07,200 --> 00:28:12,640
и теперь мы можем перемещать персонажа игрока

660
00:28:13,360 --> 00:28:19,520
Да, все это хорошо, но

661
00:28:16,320 --> 00:28:21,520
позвольте мне представить еще один игровой цикл

662
00:28:19,520 --> 00:28:26,960
и это так называемый дельта или аккумуляторный метод

664
00:28:24,640 --> 00:28:30,799
это еще один популярный метод для создания приличного игрового цикла

666
00:28:29,600 --> 00:28:36,640
Теперь я просто прокомментирую

674
00:28:48,240 --> 00:28:54,559
fps это то же самое

675
00:28:51,600 --> 00:28:59,600
и затем мы создадим эту дельта-переменную

677
00:28:56,799 --> 00:29:01,600
и 0 на данный момент

685
00:29:13,520 --> 00:29:18,080
Итак, сначала я напечатаю все

712
00:30:08,960 --> 00:30:13,520
Да, это все, так что давайте проверим.

713
00:30:16,640 --> 00:30:22,080
это работает это тоже работает

714
00:30:19,360 --> 00:30:25,440
Итак, в начале цикла мы проверяем текущее время

716
00:30:24,240 --> 00:30:32,399
и затем вычитаем это последнее время из текущего времени

719
00:30:30,080 --> 00:30:37,120
что в основном означает, сколько времени прошло.

721
00:30:34,720 --> 00:30:42,799
и также делим его на этот интервал.

723
00:30:39,679 --> 00:30:46,799
и добавить к этой дельте

724
00:30:42,799 --> 00:30:49,679
и текущее время становится последним временем

725
00:30:46,799 --> 00:30:53,360
и этот оператор if

726
00:30:49,679 --> 00:30:56,720
эта 1 равна этому интервалу рисования

728
00:30:54,640 --> 00:30:58,399
Так что мы делаем следующее

729
00:30:56,720 --> 00:31:08,399
поэтому в каждом цикле мы прибавляем к дельте прошедшее время, деленное на интервал рисования.

733
00:31:04,559 --> 00:31:12,799
и когда эта дельта достигает этого интервала рисования

735
00:31:09,840 --> 00:31:18,559
тогда мы обновляем и перерисовываем, затем сбрасываем эту дельту

737
00:31:15,919 --> 00:31:22,399
вот еще один способ обновления и перерисовки в каждом интервале рисования

739
00:31:21,600 --> 00:31:30,880
и чтобы проверить, действительно ли это рисует экран 60 раз в секунду

743
00:31:28,720 --> 00:31:34,080
мы можем отобразить fps

744
00:31:30,880 --> 00:31:36,880
так что для проверки fps

745
00:31:34,080 --> 00:31:38,799
мы добавим еще немного переменных

753
00:31:48,240 --> 00:32:00,840
каждый раз, когда она обновляется и перерисовывается, мы увеличиваем счетчик отрисовки на 1

758
00:32:00,880 --> 00:32:05,279
и мы увеличиваем таймер

763
00:32:13,200 --> 00:32:19,679
так что это означает, что время прошло

764
00:32:16,320 --> 00:32:22,720
поэтому в каждом цикле мы добавляем прошедшее время к этому таймеру

766
00:32:21,519 --> 00:32:32,080
и когда этот таймер достигнет одной секунды

771
00:32:28,720 --> 00:32:35,519
так что один два три четыре пять шесть семь восемь девять

772
00:32:32,080 --> 00:32:35,519
один миллиард наносекунд

773
00:32:36,399 --> 00:32:39,840
мы покажем fps

777
00:32:42,799 --> 00:32:52,559
сколько раз он обновлялся и перерисовывался, пока это время не достигнет одной секунды

780
00:32:50,000 --> 00:32:58,399
а затем мы сбросим счетчик и таймер рисования.

783
00:33:00,559 --> 00:33:04,480
Да, хорошо, давайте проверим это

784
00:33:08,399 --> 00:33:11,840
да, вот так

785
00:33:17,279 --> 00:33:24,480
так что вы можете видеть, что программа поддерживает 60 кадров в секунду

787
00:33:21,200 --> 00:33:30,480
то есть программа рисует экран 60 раз в секунду

789
00:33:27,840 --> 00:33:30,480
так что все работает хорошо

790
00:33:31,600 --> 00:33:38,320
Итак, нам удалось создать наш игровой цикл

792
00:33:35,919 --> 00:33:43,519
и в этом уроке мы продолжим работу с этим дельта-циклом игры

794
00:33:41,200 --> 00:33:47,919
но вы можете выбрать либо этот метод сна, либо дельта-метод

796
00:33:46,320 --> 00:33:50,399
любой способ подходит

797
00:33:47,919 --> 00:33:58,720
и мы больше не будем редактировать эти игровые циклы, так что оба варианта работают отлично на протяжении всего этого урока

800
00:33:55,919 --> 00:34:05,679
некоторые люди предпочитают эту дельту этому методу сна

803
00:34:03,039 --> 00:34:12,639
потому что я не совсем уверен, но некоторые говорят, что эта развертка нитей не совсем точная

806
00:34:09,919 --> 00:34:18,399
так что иногда это создает разницу в несколько миллисекунд или что-то в этом роде

808
00:34:15,679 --> 00:34:21,359
Я не совсем уверен в этом

809
00:34:18,399 --> 00:34:22,720
может быть, вы можете попробовать оба варианта

810
00:34:21,359 --> 00:34:30,079
и посмотреть, что лучше подходит для вашей игры

812
00:34:26,399 --> 00:34:32,800
Итак, теперь самое сложное сделано

813
00:34:30,079 --> 00:34:36,320
далее мы создадим персонажа игрока

814
00:34:32,800 --> 00:34:49,409
и выведем спрайты игроков на экран

816
00:34:37,570 --> 00:34:49,409
[Музыка]

