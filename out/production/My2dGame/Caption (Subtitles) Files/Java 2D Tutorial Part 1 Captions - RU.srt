1
00:00:00,240 --> 00:00:03,439
Всем привет, это RyiSnow и с этого видео

2
00:00:03,439 --> 00:00:06,799
я начну серию уроков по создании 2d java игры.

3
00:00:06,799 --> 00:00:11,679
Это то, что я хочу сделать уже долгое время, так что

4
00:00:11,679 --> 00:00:14,920
я рад, что могу наконец начать.

5
00:00:14,920 --> 00:00:18,000
В сравнении в другими уроками по созданию игр,

6
00:00:18,000 --> 00:00:24,320
что я делал раньше, вроде текстовой игры, разработка 2d игры

7
00:00:24,320 --> 00:00:28,960
более сложная и требует немного больше усилий.

8
00:00:28,960 --> 00:00:31,679
Поэтому я постараюсь сделать эту серию

9
00:00:31,679 --> 00:00:34,320
максимально простой, чтобы вы могли повторять

10
00:00:34,320 --> 00:00:39,680
за мной, даже если у вас нет опыта разработки 2d java игр.

11
00:00:39,680 --> 00:00:43,440
Надеюсь, вам понравится.

12
00:00:43,440 --> 00:00:45,920
Для этой серии мы не будем использовать никакие

13
00:00:45,920 --> 00:00:49,039
внешние библиотеки, мы просто будем использовать

14
00:00:49,039 --> 00:00:52,160
простый java классы и сделаем все

15
00:00:52,160 --> 00:00:54,719
сами. Так что если у вас есть

16
00:00:54,719 --> 00:00:57,280
где писать java код, ты можешь

17
00:00:57,280 --> 00:00:59,280
сделать эту игру

18
00:00:59,280 --> 00:01:00,320
и

19
00:01:00,320 --> 00:01:03,600
Вот программа этого урока:

20
00:01:03,600 --> 00:01:06,720
Сначала мы сделаем относительно простую

21
00:01:06,720 --> 00:01:08,799
игру в жанре охоты за сокровищами.

22
00:01:08,799 --> 00:01:11,360
Создав её, вы узнаете как создать

23
00:01:11,360 --> 00:01:14,960
игровой цикл, что является основой разработки

24
00:01:14,960 --> 00:01:18,080
2d игр, и также как отображать

25
00:01:18,080 --> 00:01:21,200
персонажей, фоновую "плитку",

26
00:01:21,200 --> 00:01:23,840
предметы на экране,

27
00:01:23,840 --> 00:01:26,560
а также вы узнаете как перемещать

28
00:01:26,560 --> 00:01:29,759
игрового персонажа по экрану.

29
00:01:29,759 --> 00:01:32,960
Когда мы закончим первую игру, мы

30
00:01:32,960 --> 00:01:35,759
добавим к ней больше деталей

31
00:01:35,759 --> 00:01:38,840
и превратим её в игру по типу

32
00:01:38,840 --> 00:01:43,040
2d action rpg в стиле Zelda.

33
00:01:43,040 --> 00:01:47,360
Мы добавим монстров, NPC, диалоги,

34
00:01:47,360 --> 00:01:49,840
инвентарь, эвенты и

35
00:01:49,840 --> 00:01:51,520
всякие подобные вещи

36
00:01:51,520 --> 00:01:55,040
В этом цель этого урока.

37
00:01:55,040 --> 00:01:59,119
Этот урок для новичков в java 2d

38
00:01:59,119 --> 00:02:01,439
Итак, я объясню

39
00:02:01,439 --> 00:02:04,799
много вещей, по типу как работает игровой

40
00:02:04,799 --> 00:02:08,318
цикл итд, так что если у вас уже есть

41
00:02:08,318 --> 00:02:11,038
опыт разработки 2d игр, вы возможно

42
00:02:11,038 --> 00:02:14,640
почувствуете, что темп

43
00:02:14,640 --> 00:02:16,160
немного медленный

44
00:02:16,160 --> 00:02:17,040
но

45
00:02:17,040 --> 00:02:18,640
пожалуйста, потерпите меня

46
00:02:18,640 --> 00:02:21,520
поначалу все новички и

47
00:02:21,520 --> 00:02:26,640
кому-то все эти объясниния могут оказаться полезными

48
00:02:26,640 --> 00:02:30,000
Ок, это было предисловие, а теперь

49
00:02:30,000 --> 00:02:32,560
давайте начнем разработку

50
00:02:32,560 --> 00:02:36,480
Создадим новый проект,

51
00:02:36,480 --> 00:02:40,879
я назову его My2DGame

52
00:02:40,879 --> 00:02:45,120
просто самое обычное название, но

53
00:02:45,120 --> 00:02:46,959
это нормально

54
00:02:46,959 --> 00:02:48,800
(нажимает "Don't create")

55
00:02:48,800 --> 00:02:52,959
Теперь давайте создадим пакет и назовем

56
00:02:52,959 --> 00:02:55,440
это.. main

57
00:02:55,440 --> 00:02:58,159
И создадим класс..

58
00:02:58,159 --> 00:03:02,760
Давайте создадим класс Main

59
00:03:05,360 --> 00:03:06,720
ок

60
00:03:06,720 --> 00:03:08,959
Сначала создадим

61
00:03:08,959 --> 00:03:10,239
окно

62
00:03:10,239 --> 00:03:12,800
Мы используем этот JFrame класс..

63
00:03:12,800 --> 00:03:19,000
(проговаривает код, который печатает)

64
00:03:23,120 --> 00:03:25,440
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)

65
00:03:25,440 --> 00:03:28,799
для того, чтобы мы могли закрывать окно нормально

66
00:03:28,799 --> 00:03:32,799
* благодаря этому окно будет правильно закрываться,

67
00:03:32,799 --> 00:03:35,280
когда пользователь нажмет кнопку закрытия ("x")

68
00:03:35,280 --> 00:03:38,319
также мы сделаем

69
00:03:38,319 --> 00:03:40,720
window.setResizable(false)

70
00:03:40,720 --> 00:03:45,120
чтобы зафиксировать размер окна

71
00:03:45,120 --> 00:03:48,640
Дальше давайте установим

72
00:03:49,280 --> 00:03:52,000
заголовок игры

73
00:03:52,080 --> 00:03:58,959
Пусть будет "2D Adventure"

74
00:03:58,959 --> 00:04:02,720
(проговаривает код)

75
00:04:02,720 --> 00:04:08,560
*setLocationRelativeTo(null) - мы не указываем положение окна

76
00:04:08,799 --> 00:04:11,200
чтобы оно отображалось

77
00:04:11,200 --> 00:04:14,080
по центру экрана

78
00:04:14,080 --> 00:04:18,560
и, наконец, window.setVisible(true)

79
00:04:18,560 --> 00:04:21,440
чтобы окно отображалось

80
00:04:21,440 --> 00:04:26,240
Ок, теперь давайте создадим другой класс

81
00:04:27,040 --> 00:04:29,360
и его я назову

82
00:04:29,360 --> 00:04:32,320
GamePanel

83
00:04:33,199 --> 00:04:40,160
и этот GamePanel будет наследником JPanel

84
00:04:41,520 --> 00:04:43,919
Так что, по сути, это

85
00:04:43,919 --> 00:04:47,360
подкласс JPanel и он имеет все

86
00:04:47,360 --> 00:04:50,639
функции, которые есть у JPanel

87
00:04:50,639 --> 00:04:53,759
Эта GamePanel работает как своего рода

88
00:04:53,759 --> 00:04:55,759
экран игры, так что

89
00:04:55,759 --> 00:04:58,000
сначала мы собираемся

90
00:04:58,000 --> 00:05:00,160
решить некоторые

91
00:05:00,160 --> 00:05:03,919
настройки экрана

92
00:05:03,919 --> 00:05:07,440
И создадим тут несколько переменных

93
00:05:07,440 --> 00:05:14,479
final int originalTileSize

94
00:05:14,479 --> 00:05:18,639
я собираюсь остановиться на 16

95
00:05:19,520 --> 00:05:25,039
Это означает, плитка 16 на 16 и эта 16

96
00:05:25,039 --> 00:05:28,880
на 16 будет дефолтным размером

97
00:05:28,880 --> 00:05:32,160
игрового персонажа или любого NPC и плитки

98
00:05:32,160 --> 00:05:36,000
карты в этой иге. 16 на 16 своего рода

99
00:05:36,000 --> 00:05:39,520
стандартный размер для многих ретро 2d

100
00:05:39,520 --> 00:05:42,800
игр и многие персонажи и плитки сделаны 

101
00:05:42,800 --> 00:05:46,000
этого размера, так что вы можете найти много

102
00:05:46,000 --> 00:05:48,639
примеров. Некоторые игры используют больше пикселей,

103
00:05:48,639 --> 00:05:52,160
как 32х32, чтобы нарисовать персонажа,

104
00:05:52,160 --> 00:05:56,639
но мы остановимся на 16 пикселей в этот раз.

105
00:05:56,639 --> 00:05:59,840
Однако здесь есть небольшая загвоздка,

106
00:05:59,840 --> 00:06:00,800
поскольку

107
00:06:00,800 --> 00:06:04,000
современные компьютеры и мониторы имеют

108
00:06:04,000 --> 00:06:06,639
гораздо большое разрешение, чем оно было

109
00:06:06,639 --> 00:06:10,800
в эру NES или SNES, ну знаете, 80-е, 90-е

110
00:06:10,800 --> 00:06:11,600
поэтому

111
00:06:11,600 --> 00:06:15,840
персонажи и плитка 16 на 16 выглядят 

112
00:06:15,840 --> 00:06:17,759
маленькими на экране,

113
00:06:17,759 --> 00:06:24,960
например, разрешение NES было 256 на 224,

114
00:06:24,960 --> 00:06:30,479
а у Genesis оно было 320 на 224,

115
00:06:30,479 --> 00:06:31,199
поэтому

116
00:06:31,199 --> 00:06:34,639
персонажи 16 на 16 выглядели приличного размера

117
00:06:34,639 --> 00:06:37,039
при той конфигурации, однако

118
00:06:37,039 --> 00:06:39,680
я уверен, что у вашего монитора гораздо большее

119
00:06:39,680 --> 00:06:43,120
разрешение, чем там. И что нужно сделать,

120
00:06:43,120 --> 00:06:45,199
мы прибегнем к масштабированию

121
00:06:45,199 --> 00:06:48,800
Давайте создадим integer переменную

122
00:06:48,800 --> 00:06:52,400
final int scale

123
00:06:52,400 --> 00:06:55,120
и я установлю её равной 3

124
00:06:55,120 --> 00:06:58,880
Вы знаете, что мы создаем персонажей в

125
00:06:58,880 --> 00:07:01,599
рамке 16 на 16, но

126
00:07:01,599 --> 00:07:02,880
он будет выглядеть

127
00:07:02,880 --> 00:07:07,120
как 48 на 48 пикселей на экране

128
00:07:07,120 --> 00:07:10,080
Подобное масштабирование довольно популярно

129
00:07:10,080 --> 00:07:14,240
для разработки ретро 2d игр, так что

130
00:07:14,240 --> 00:07:17,360
мы тоже последуем этой традиции

131
00:07:17,360 --> 00:07:23,520
так, другой integer - final int tileSize

132
00:07:23,520 --> 00:07:32,960
(проговаривает код, который печатает)

133
00:07:33,599 --> 00:07:39,199
В общем, это плитка 48х48,

134
00:07:39,199 --> 00:07:42,560
которая является реальным размером, который

135
00:07:42,560 --> 00:07:44,960
будет отображаться на нашем игровом

136
00:07:44,960 --> 00:07:48,080
экране. Дальше мы определимся с размером

137
00:07:48,080 --> 00:07:51,120
нашего игрового экрана и чтобы это сделать, мы

138
00:07:51,120 --> 00:07:54,080
сначала решим как много плиток игра может

139
00:07:54,080 --> 00:07:55,919
отобразить

140
00:07:55,919 --> 00:07:59,199
горизонтально и вертикально, и это

141
00:07:59,199 --> 00:08:02,720
определит общий размер экрана

142
00:08:02,720 --> 00:08:09,440
final int maxScreemCol

143
00:08:09,440 --> 00:08:15,440
для этой игры мы выберем 16

144
00:08:16,720 --> 00:08:19,039
и

145
00:08:19,039 --> 00:08:24,720
final int maxScreenRow

146
00:08:24,720 --> 00:08:28,720
и количество строк 12

147
00:08:28,720 --> 00:08:31,680
16 плиток горизонтально и 12 плиток

148
00:08:31,680 --> 00:08:35,279
вертикально, так отношение сторон будет

149
00:08:35,279 --> 00:08:38,000
4 на 3

150
00:08:38,000 --> 00:08:40,958
и так как размер одной плитки 48

151
00:08:40,958 --> 00:08:43,839
пикселей, то

152
00:08:43,839 --> 00:09:14,560
(проговаривает код, который печатает)

153
00:09:14,560 --> 00:09:17,920
это будет..

154
00:09:17,920 --> 00:09:21,839
размер плитки 48х48

155
00:09:21,839 --> 00:09:22,959
умножить на

156
00:09:22,959 --> 00:09:25,600
16

157
00:09:26,200 --> 00:09:28,160
768

158
00:09:28,160 --> 00:09:30,800
пикселей

159
00:09:30,800 --> 00:09:33,360
и высота равна

160
00:09:33,360 --> 00:09:35,040
48

161
00:09:35,040 --> 00:09:36,800
умножить на 12

162
00:09:36,800 --> 00:09:37,920
и равна

163
00:09:37,920 --> 00:09:42,320
576

164
00:09:42,320 --> 00:09:44,240
пикселей

165
00:09:44,240 --> 00:09:47,600
Это будет размером нашего игрового

166
00:09:47,600 --> 00:09:50,000
экрана, но, конечно, вы можете его изменить,

167
00:09:50,000 --> 00:09:51,519
если хотите,

168
00:09:51,519 --> 00:09:52,800
ну..

169
00:09:52,800 --> 00:09:54,080
я не знаю

170
00:09:54,080 --> 00:09:56,399
18 или

171
00:09:56,399 --> 00:09:58,480
14 или

172
00:09:58,480 --> 00:10:00,959
что хотите

173
00:10:01,040 --> 00:10:03,120
screenWidth и screenHeight

174
00:10:03,120 --> 00:10:06,000
изменятся автоматически

175
00:10:06,000 --> 00:10:07,920
На этом все с

176
00:10:07,920 --> 00:10:11,040
настройками экрана, теперь давайте создадим

177
00:10:11,040 --> 00:10:16,040
конструктор нашей GamePanel

178
00:10:18,720 --> 00:10:21,040
окей

179
00:10:21,680 --> 00:10:23,200
не GamePane,

180
00:10:23,200 --> 00:10:24,720
а GamePanel

181
00:10:24,720 --> 00:10:26,800
и первым

182
00:10:26,800 --> 00:10:35,399
(проговаривает код, который печатает)

183
00:10:35,680 --> 00:10:38,000
Мы собираемся устрановить размер этой

184
00:10:38,000 --> 00:10:40,000
игровой панели

185
00:10:40,000 --> 00:10:47,640
(проговаривает код, который печатает)

186
00:10:49,600 --> 00:10:51,839
и затем

187
00:10:51,839 --> 00:10:54,640
не уверен необходимо ли это, но

188
00:10:54,640 --> 00:10:57,360
да, давайте установим цвет фона

189
00:10:57,360 --> 00:11:00,399
этой игровой панели

190
00:11:00,399 --> 00:11:15,120
(проговаривает код, который печатает)

191
00:11:15,120 --> 00:11:17,760
Если у вас был опыт разработки 

192
00:11:17,760 --> 00:11:21,040
2d игр в java и

193
00:11:21,040 --> 00:11:23,600
если вы использовали canvas, чтобы рисовать

194
00:11:23,600 --> 00:11:24,959
экран, то

195
00:11:24,959 --> 00:11:28,320
вы вероятно использоваля bufferStrategy тоже

196
00:11:28,320 --> 00:11:29,839
но в этот раз мы будем использовать

197
00:11:29,839 --> 00:11:32,560
JPanel, а JPanel имеет эту 

198
00:11:32,560 --> 00:11:36,079
double buffering функцию из коробки, так что

199
00:11:36,079 --> 00:11:38,320
я думаю, что это хорошая идея выставить здесь

200
00:11:38,320 --> 00:11:41,279
true для лучшей

201
00:11:41,279 --> 00:11:44,079
производительности про рендеринге

202
00:11:44,079 --> 00:11:46,079
ок, теперь давайте вернемся к классу

203
00:11:46,079 --> 00:11:48,000
Main и

204
00:11:48,000 --> 00:11:52,720
добавим GamePanel к этому окну

205
00:11:53,120 --> 00:12:01,760
(проговаривает код, который печатает)

206
00:12:02,399 --> 00:12:05,680
и мы добавим эту gamePanel

207
00:12:05,680 --> 00:12:08,560
к этому окну

208
00:12:10,959 --> 00:12:12,000
ок

209
00:12:12,000 --> 00:12:14,880
так, да, это

210
00:12:14,880 --> 00:12:17,360
подкласс JPanel, так что по сути это 

211
00:12:17,360 --> 00:12:20,800
класс JPanel с некоторыми дополнительными

212
00:12:20,800 --> 00:12:23,760
функциями, так что вы можете добавить это

213
00:12:23,760 --> 00:12:26,639
к окну, как будто добавляете JPanel к

214
00:12:26,639 --> 00:12:29,360
этому окну. И дальше

215
00:12:29,360 --> 00:12:31,760
мы собираемся

216
00:12:31,760 --> 00:12:33,519
pack

217
00:12:33,519 --> 00:12:37,200
эту JPanel, чтобы мы могли её видеть

218
00:12:37,200 --> 00:12:39,839
Ок, давайте проверим

219
00:12:39,839 --> 00:12:41,760
все хорошо

220
00:12:41,760 --> 00:12:42,560
итак

221
00:12:42,560 --> 00:12:45,120
наш игровой экран появляется

222
00:12:45,120 --> 00:12:47,360
и его размер

223
00:12:47,360 --> 00:12:48,880
768

224
00:12:48,880 --> 00:12:49,800
и

225
00:12:49,800 --> 00:12:53,279
576, так мы можем отобразить

226
00:12:53,279 --> 00:12:54,560
16

227
00:12:54,560 --> 00:12:58,480
плиток 48 на 48 горизонтально и 12

228
00:12:58,480 --> 00:13:03,600
плиток 48 на 48 вертикально

229
00:13:03,600 --> 00:13:06,480
Теперь у нас есть окно, так что

230
00:13:06,480 --> 00:13:09,839
давайте поговорим об основных механиках

231
00:13:09,839 --> 00:13:13,040
этой игры. Я считаю, что наиболее важный

232
00:13:13,040 --> 00:13:16,240
концепт 2d игры это

233
00:13:16,240 --> 00:13:19,519
существование времени

234
00:13:19,519 --> 00:13:22,079
в моей предыдущей текстовой игре

235
00:13:22,079 --> 00:13:25,279
когда вы что-то делаете, например, жмете

236
00:13:25,279 --> 00:13:26,399
на кнопку,

237
00:13:26,399 --> 00:13:29,040
тогда программа

238
00:13:29,040 --> 00:13:32,639
делает некую обработку и затем останавливается

239
00:13:32,639 --> 00:13:34,959
Она просто ждем, пока вы что-то сделаете

240
00:13:34,959 --> 00:13:38,560
вроде нажатия той же кнопки

241
00:13:38,560 --> 00:13:39,839
Тем не менее

242
00:13:39,839 --> 00:13:43,760
в 2d играх как только вы запустите программу,

243
00:13:43,760 --> 00:13:47,440
программа продолжает работать и не

244
00:13:47,440 --> 00:13:50,800
останавливается, пока вы не закроете

245
00:13:50,800 --> 00:13:54,880
игру или сделаете что-то особенное

246
00:13:54,880 --> 00:13:57,760
Представьте, что когда вы играете в игры типа

247
00:13:57,760 --> 00:14:01,519
super mario или minecraft или call of duty

248
00:14:01,519 --> 00:14:05,760
или любую другую экшен игру,

249
00:14:05,760 --> 00:14:07,920
вы можете перемещать персонажа по 

250
00:14:07,920 --> 00:14:09,760
экрану и

251
00:14:09,760 --> 00:14:12,639
другие персонажи, такие как монстры или

252
00:14:12,639 --> 00:14:17,760
NPC также двигаются по экрану

253
00:14:17,760 --> 00:14:18,560
но

254
00:14:18,560 --> 00:14:20,240
как это может происходить

255
00:14:20,240 --> 00:14:23,680
Механика этого по сути такая же, как и

256
00:14:23,680 --> 00:14:27,040
ручная анимация. Персонаж на самом деле

257
00:14:27,040 --> 00:14:31,120
это последовательность статичных картинок, но

258
00:14:31,120 --> 00:14:33,760
поскольку картинки сменяются очень

259
00:14:33,760 --> 00:14:34,720
быстро,

260
00:14:34,720 --> 00:14:37,600
все выглядит так, как будто персонаж двигается

261
00:14:37,600 --> 00:14:40,079
Так же и в видеоигре

262
00:14:40,079 --> 00:14:43,920
так если FPS игры 60, то это означает,

263
00:14:43,920 --> 00:14:47,040
что экран обновляется 60 раз в

264
00:14:47,040 --> 00:14:48,240
секунду

265
00:14:48,240 --> 00:14:50,639
и ваш персонаж как будто двигается,

266
00:14:50,639 --> 00:14:54,160
но на самом деле это серия из 60-ти статичный

267
00:14:54,160 --> 00:14:55,360
картинок

268
00:14:55,360 --> 00:14:58,160
Итак, чтобы сделать анимацию в нашей игре, нам

269
00:14:58,160 --> 00:15:01,760
нужно создать время в нашей игры, а для этого

270
00:15:01,760 --> 00:15:04,880
нужно запустить игровые часы

271
00:15:04,880 --> 00:15:08,079
И чтобы это сделать, мы будем использовать класс

272
00:15:08,079 --> 00:15:10,480
под названием

273
00:15:10,839 --> 00:15:13,120
Thread и

274
00:15:13,120 --> 00:15:17,440
Я назову это gameThread

275
00:15:17,440 --> 00:15:21,600
Thread это нечно, что вы можете начать и остановить

276
00:15:21,600 --> 00:15:22,880
И когда

277
00:15:22,880 --> 00:15:25,120
Thread начинается, 

278
00:15:25,120 --> 00:15:27,120
благодаря ему программа

279
00:15:27,120 --> 00:15:28,160
исполняется,

280
00:15:28,160 --> 00:15:30,560
пока вы его не остановите. Это не Thread

281
00:15:30,560 --> 00:15:33,440
сам по себе делает что-то особенное, но когда

282
00:15:33,440 --> 00:15:36,160
вы хотите повторять что-то снова и 

283
00:15:36,160 --> 00:15:37,279
снова,

284
00:15:37,279 --> 00:15:40,160
как рисование экрана 60 раз каждую

285
00:15:40,160 --> 00:15:43,360
одну секунду, Thread очень полезен

286
00:15:43,360 --> 00:15:45,920
Итак, мы собираемя использовать этот Thread

287
00:15:45,920 --> 00:15:49,120
в нашей GamePanel. И чтобы запустить Thread, нам нужно

288
00:15:49,120 --> 00:15:52,440
реализовать

289
00:15:54,079 --> 00:15:56,880
Runnable в этом классе

290
00:15:56,880 --> 00:15:59,440
Это ключ к

291
00:15:59,440 --> 00:16:01,680
использованию Thread

292
00:16:01,680 --> 00:16:02,959
и

293
00:16:02,959 --> 00:16:05,120
мы видим ошибку,

294
00:16:05,120 --> 00:16:07,360
нам предлагают добавить

295
00:16:07,360 --> 00:16:11,120
нереализованные методы, давайте сделаем это

296
00:16:11,120 --> 00:16:14,639
Дальше он автоматически генерирует этот run()

297
00:16:14,639 --> 00:16:17,120
метод

298
00:16:17,920 --> 00:16:20,839
Итак, что же это за run() метод

299
00:16:20,839 --> 00:16:24,399
вероятно, вы можете увидеть это объяснение

300
00:16:24,399 --> 00:16:25,199
да

301
00:16:25,199 --> 00:16:27,680
в общем, оно говорит

302
00:16:27,680 --> 00:16:30,399
когда объект реализует интерфейс

303
00:16:30,399 --> 00:16:33,199
Runnable, в нашем случае класс

304
00:16:33,199 --> 00:16:36,720
GamePanel используется для создания Thread

305
00:16:36,720 --> 00:16:39,519
Запуск Thread влечет за собой

306
00:16:39,519 --> 00:16:42,000
вызов метода run() в отдельном

307
00:16:42,000 --> 00:16:44,320
потоке исполние, таки образом

308
00:16:44,320 --> 00:16:47,360
когда мы запускаем этот gameThread, он

309
00:16:47,360 --> 00:16:50,399
автоматически вызывает этот run() метод, так что

310
00:16:50,399 --> 00:16:52,959
вот как это работает

311
00:16:52,959 --> 00:16:56,399
ок, я собираюсь создать

312
00:16:56,399 --> 00:17:00,240
новый метод здесь

313
00:17:00,240 --> 00:17:07,679
(проговаривает код, который печатает)

314
00:17:07,679 --> 00:17:10,319
инициализируем gameThread

315
00:17:10,319 --> 00:17:21,520
(проговаривает код, который печатает)

316
00:17:21,520 --> 00:17:25,359
это все значит, что

317
00:17:25,359 --> 00:17:27,919
мы передаем этот класс,

318
00:17:27,919 --> 00:17:30,400
класс GamePanel в этот

319
00:17:30,400 --> 00:17:33,039
конструктор, в общем так вы

320
00:17:33,039 --> 00:17:35,679
инициализируете Thread

321
00:17:35,679 --> 00:17:37,360
и дальше

322
00:17:37,360 --> 00:17:40,720
да, давайте запустим этот Thread

323
00:17:40,720 --> 00:17:44,400
gameThread.start()

324
00:17:44,400 --> 00:17:45,600
итак

325
00:17:45,600 --> 00:17:48,480
он автоматически вызовет этот run()

326
00:17:48,480 --> 00:17:50,960
метод

327
00:17:51,600 --> 00:17:52,880
и

328
00:17:52,880 --> 00:17:55,760
в этом run() методе мы создадим игровой

329
00:17:55,760 --> 00:17:56,880
цикл,

330
00:17:56,880 --> 00:18:00,710
который будет ядром нашей игры

331
00:18:00,710 --> 00:18:12,550
[Музыка]
