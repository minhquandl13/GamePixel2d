1
00:00:00,240 --> 00:00:06,799
こんにちは、RyiSnowです
この動画より、Javaによる2Dゲーム作成のチュートリアルを始めます

2
00:00:06,799 --> 00:00:14,920
これは私がかなり前からやりたかったことなので
ついに開始することができて嬉しく思います

3
00:00:14,920 --> 00:00:28,960
私が以前に作ったテキストアドベンチャーゲームと比べると
2Dゲームの作成手順はやや複雑で、やることも多いですが

4
00:00:28,960 --> 00:00:39,680
可能な限り噛み砕いて説明することで
2Dゲームの開発経験がまったくない方でもついていけるようにしたいと思っています

5
00:00:39,680 --> 00:00:49,039
楽しんでもらえたら嬉しいです
本ゲームの開発においては外部のライブラリ等は一切使わず

6
00:00:49,039 --> 00:00:59,280
Javaにデフォルトで組み込まれているクラスだけを使って進めていきます
ですのでJavaを書ける環境さえあれば、このゲームは作れます

7
00:00:59,280 --> 00:01:08,799
こちらがチュートリアルの予定表です
最初に比較的簡単な宝探しゲームを作ります

8
00:01:08,799 --> 00:01:23,840
これを作りながら、2Dゲームの心臓部となるゲームループの作成などを学んでいきます
またキャラクターや背景タイル、アイテムオブジェクトなどの表示や

9
00:01:23,840 --> 00:01:35,759
プレイヤーキャラクターの動かし方なども学ぶことができます
この最初のゲームが完成した後は、さらに要素を追加して

10
00:01:35,759 --> 00:01:51,520
初期の『ゼルダの伝説』のような、2DアクションRPGに変えていきます
モンスターやNPC、会話、インベントリ、イベントなどを追加し

11
00:01:51,520 --> 00:01:59,119
このチュートリアルは終了となります
これはJava 2Dゲームの初心者に向けたチュートリアルなので

12
00:01:59,119 --> 00:02:11,039
いろんなことを細かく説明することになると思います
すでに2Dゲーム開発の経験や知識がある方からすると

13
00:02:11,039 --> 00:02:18,640
ペースが遅く感じるかもしれませんが
そこはご容赦願います

14
00:02:18,640 --> 00:02:32,560
誰もが最初は初心者であり、これを見る方の中には詳細な説明が欲しいという方もいると思います
では前置きはこれくらいにして、開発を始めましょう

15
00:02:32,560 --> 00:02:40,879
まず新しいプロジェクトを作成します
名前は"My2DGame"とします

16
00:02:40,879 --> 00:02:48,800
ひねりのカケラもない名前ですが、まあいいでしょう
こちらは作成しません

17
00:02:48,800 --> 00:02:58,159
続いてパッケージを作成し、"main"と名付けます
その中にクラスを作成し

18
00:02:58,159 --> 00:03:02,760
"Main"と名付けます

19
00:03:06,720 --> 00:03:14,159
最初にウィンドウを作成するのですが
このJFrameというクラスを使います

20
00:03:32,799 --> 00:03:40,720
こうすることでウィンドウを適切に閉じることができます
そしてこれも追加します…

21
00:03:40,720 --> 00:03:52,000
これでウィンドウのサイズが固定されました
続いてゲームタイトルを表示します

22
00:03:52,080 --> 00:04:02,720
とりあえず… "2D Adventure"としておきましょうか

23
00:04:08,799 --> 00:04:16,720
これでウィンドウがスクリーンの中央に位置します

24
00:04:18,560 --> 00:04:26,240
これでウィンドウが実際に出現します
では新しいクラスを作りましょう

25
00:04:27,040 --> 00:04:32,320
このクラスはGamePanelと名付けます

26
00:04:33,199 --> 00:04:40,160
このGamePanelにJPanelを継承させます

27
00:04:41,520 --> 00:04:50,639
つまりこれはJPanelのサブクラスということになり
JPanelが持つ機能が使えるようになります

28
00:04:50,639 --> 00:05:03,919
このGamePanelは主にゲーム画面として使用するため
最初に画面設定を決めます

29
00:05:03,919 --> 00:05:08,479
変数を作っていきます

30
00:05:14,479 --> 00:05:18,639
ここは16を選ぶことにします

31
00:05:19,520 --> 00:05:32,160
つまりこれは16x16のタイル、ということです
この16x16というのがプレイヤーやNPC、背景タイルなどのサイズとなります

32
00:05:32,160 --> 00:05:42,800
16x16というのはレトロな2Dゲームではよく使われるサイズで
このサイズで描かれた多くのキャラクターやタイルが存在するので

33
00:05:42,800 --> 00:05:52,160
参考例は沢山あると思います
ゲームによっては32x32のサイズのキャラクターを使ったりもしますが

34
00:05:52,160 --> 00:05:59,840
今回は16x16でいくことにします
ただここで注意点があります

35
00:05:59,840 --> 00:06:17,759
ファミコンやスーファミの時代と比べ、昨今のモニターの解像度というのは遥かに高くなっています
よって16x16のキャラクターは、画面上でとても小さくなってしまうのです

36
00:06:17,759 --> 00:06:30,479
ファミコンの解像度は256x224で
メガドライブの解像度は320x224でした

37
00:06:30,479 --> 00:06:39,680
なので16x16のキャラでも、ちょうどいい大きさだったのです
でもあなたの今使用しているモニターの解像度はもっと高いはずです

38
00:06:39,680 --> 00:06:45,199
ではどうするか？
"スケーリング"をするのです

39
00:06:45,199 --> 00:06:52,400
整数型の変数を作りましょう

40
00:06:52,400 --> 00:06:58,880
値は3にします
私たちは16x16のサイズでキャラクターを作りますが

41
00:06:58,880 --> 00:07:14,240
これを3倍の大きさ（48x48）で画面に表示するのです
このようなスケーリングは、現代のレトロゲーム開発においてはよくおこなわれることで

42
00:07:14,240 --> 00:07:23,520
私たちもそれに倣っていきます
もう１つ変数を作ります

43
00:07:33,599 --> 00:07:44,960
つまりこれは48x48のタイル、ということです
これが実際にゲーム画面に表示されるサイズとなります

44
00:07:44,960 --> 00:07:59,199
次にゲーム画面の大きさを決めます
そのために、縦と横にタイルを何個表示するかを決めます

45
00:07:59,199 --> 00:08:05,759
これによって画面サイズが決まってきます

46
00:08:09,440 --> 00:08:15,440
今回は横に16個

47
00:08:24,720 --> 00:08:31,680
縦に12個にします
水平に16、垂直に12です

48
00:08:31,680 --> 00:08:43,839
なので画面比率は4対3になります
そしてタイル１つのサイズは48ピクセルなので

49
00:09:14,560 --> 00:09:21,839
タイルサイズが48ということは

50
00:09:30,800 --> 00:09:35,040
高さは…

51
00:09:44,240 --> 00:09:52,800
これが私たちのゲーム画面のサイズとなります
もちろん、この数字は好きな数字に変えてかまいません

52
00:09:54,080 --> 00:10:00,959
18とか14とか、自由に選んでください

53
00:10:01,040 --> 00:10:07,920
そうすれば自動的に画面の幅と高さも変更されます
以上、画面設定でした

54
00:10:07,920 --> 00:10:16,040
次はこのクラスのコンストラクタを作成します

55
00:10:35,680 --> 00:10:47,640
このGamePanelのサイズを設定する必要があるので
screenWidthとscreenHeightを使います

56
00:10:49,600 --> 00:11:03,720
これは必要ないかもしれませんが…
GamePanelの背景色も設定しておきましょう

57
00:11:15,120 --> 00:11:24,959
過去にJavaで2Dゲームを作ったことがある方は
画面描画にCanvasクラスを使った経験もあるかもしれません

58
00:11:24,959 --> 00:11:29,839
それからBufferStrategyも
しかし今回はこのJPanelを使います

59
00:11:29,839 --> 00:11:44,079
このJPanelにはダブルバッファリング機能がデフォルトで備わっているので
描画をサポートするために一応有効にしておきましょう

60
00:11:44,079 --> 00:11:52,720
ではMainクラスに戻り
GamePanelをこのウィンドウに追加します

61
00:12:02,399 --> 00:12:08,560
そしてこのgamePanelをウィンドウに追加します

62
00:12:12,000 --> 00:12:20,800
GamePanelはJPanelのサブクラスで
いわば追加機能を備えたJPanelみたいなものです

63
00:12:20,800 --> 00:12:37,200
なのでこうしてJFrameにパネルとして追加することができるのです
最後に pack をすることで、このGamePanelの実装が完了します

64
00:12:37,200 --> 00:12:41,760
実行してみましょう
はい

65
00:12:41,760 --> 00:12:49,800
ゲーム画面が表示されました
サイズは768x576

66
00:12:49,800 --> 00:13:03,600
48x48のタイルが横に16個
48x48のタイルが縦に12個です

67
00:13:03,600 --> 00:13:19,519
画面はできたので、次はゲームの基本的なメカニズムについて説明します
2Dゲーム作成において最も重要なコンセプトは「時間が存在する」ということです

68
00:13:19,519 --> 00:13:26,399
私の過去のテキストゲームでは
たとえばプレイヤーがボタンを押すと

69
00:13:26,399 --> 00:13:38,560
プログラムは一旦反応しますが、その後止まります
プレイヤーが再びなにかアクションをおこすまで止まったままです

70
00:13:38,560 --> 00:13:54,880
しかし2Dゲームでは、一旦プログラムが実行されると、ずっと止まらず動き続けます
止まるのはゲームを閉じたときか、なにか特別なことをしたときだけです

71
00:13:54,880 --> 00:14:09,760
スーパーマリオやマインクラフトやコールオブデューティなど、アクション要素のあるゲームをプレイすると
画面上でキャラクターを動かすことができます

72
00:14:09,760 --> 00:14:20,240
またモンスターやNPCなども画面上を動き回っています
これはどうやって実現しているのでしょうか？

73
00:14:20,240 --> 00:14:31,120
この仕組みは手書きのアニメーションとよく似ています
キャラクターは実際は連続する静止画なのですが

74
00:14:31,120 --> 00:14:37,600
絵を切り替えるスピードが非常に速いので
動いているように見えるのです

75
00:14:37,600 --> 00:14:43,920
この原理はビデオゲームでも同じです
もしFPSが60であれば

76
00:14:43,920 --> 00:14:55,360
1秒間に60回、画面を書き換えていることになります
キャラクターは動いているように見えますが、実際は60枚の静止画をつなげたものなのです

77
00:14:55,360 --> 00:15:04,880
こうしたアニメーションを実行するために、私たちはゲーム内に「時間」を作り出す必要があります
「ゲーム内時計」を開始させるのです

78
00:15:04,880 --> 00:15:17,440
そのためにThreadというクラスを使います
名前はgameThreadとしておきます

79
00:15:17,440 --> 00:15:28,160
Threadは開始させることも、停止させることもでき
Threadを開始させることで、プログラムをひたすら動かし続けることができます

80
00:15:28,160 --> 00:15:37,279
Thread自体がなにか特別なことをするわけではありませんが
特定の処理を繰り返し実行したいときなどにはとても便利です

81
00:15:37,279 --> 00:15:45,920
1秒ごとに60回画面を書き換え続ける、といった処理などもそれに当たります
このThreadをこのGamePanel内で使用するのですが

82
00:15:45,920 --> 00:16:01,680
Threadを使用する際は、Runnableというインターフェースをクラスに組み込む必要があります
これがThreadを使用するための鍵となるのです

83
00:16:01,680 --> 00:16:11,120
エラーが出ていますね
メソッドを追加しろといっているので、その通りにしましょう

84
00:16:11,120 --> 00:16:17,120
runメソッドが自動的に追加されました

85
00:16:17,920 --> 00:16:25,199
このrunメソッドというのはなにかというと…
この説明を見たほうが早いかも

86
00:16:25,199 --> 00:16:36,720
ここに書いてあります
"Threadを作成するために、Runnableインターフェースを実装したオブジェクトを使用した場合"

87
00:16:36,720 --> 00:16:50,399
"Threadを開始した際に、オブジェクトのrunメソッドが呼ばれることとなる"
要はこのgameThreadを開始すると、自動的にrunメソッドが呼ばれるよ、という意味です

88
00:16:50,399 --> 00:17:01,759
そういう仕組みになっています
ではここに新しいメソッドを作ります

89
00:17:06,240 --> 00:17:12,160
そしてここで
gameThreadをインスタンス化します

90
00:17:17,600 --> 00:17:27,919
そしてこのThreadのコンストラクタに"this"を渡します
この"this"というのは"この"クラス、つまりGamePanelのことです

91
00:17:27,919 --> 00:17:37,360
つまりGamePanelクラスをこのThreadのコンストラクタに渡すということですね
こうしてThreadをインスタンス化します

92
00:17:37,360 --> 00:17:44,400
ではこのThreadを開始しましょう

93
00:17:44,400 --> 00:17:50,960
するとこのrunメソッドが自動的に呼ばれます

94
00:17:51,600 --> 00:18:12,550
そしてこのrunメソッドの中で、このゲームの心臓部となる"ゲームループ"を作成します
[Music]

