1
00:00:00,160 --> 00:00:10,240
このrunメソッドの中に、ゲームの心臓部となるゲームループを作成します

3
00:00:07,200 --> 00:00:12,240
最初にwhileループを作成します

7
00:00:20,640 --> 00:00:25,439
これはどういうことかというと

8
00:00:21,920 --> 00:00:29,199
このgameThreadが存在するかぎり

9
00:00:25,439 --> 00:00:33,520
このカッコの中の処理を繰り返し実行するということです

11
00:00:31,679 --> 00:00:36,079
これをテストするために

12
00:00:33,520 --> 00:00:37,600
なにかテキストを書き出してみましょう

18
00:00:45,280 --> 00:00:49,920
そしてこのメソッドを

19
00:00:50,160 --> 00:00:52,480
ここから呼びます

23
00:00:59,840 --> 00:01:02,960
では実行してみましょう

25
00:01:07,520 --> 00:01:12,960
見ての通り

26
00:01:09,360 --> 00:01:17,920
プログラムはこの処理を繰り返しています

28
00:01:15,119 --> 00:01:20,240
これはただのテストですが、実際のゲームでは

29
00:01:17,920 --> 00:01:22,040
このループの中で２つの処理を行います

31
00:01:22,280 --> 00:01:26,040
ひとつはupdate

38
00:01:39,840 --> 00:01:43,840
もうひとつは…

44
00:01:55,520 --> 00:02:00,799
例えば

45
00:01:57,119 --> 00:02:08,479
プレイヤーキャラが画面上の x=100 y=100 の位置にいるとします

47
00:02:05,360 --> 00:02:12,480
そしてプレイヤーが「↓」キーを押すと、キャラクターが下に動くと想定します

49
00:02:11,200 --> 00:02:20,120
この場合、例えばY座標に3を追加します

51
00:02:17,360 --> 00:02:23,760
するとプレイヤーのY座標は103になります

52
00:02:20,120 --> 00:02:30,959
つまりプレイヤーの情報がアップデートされたわけです

54
00:02:27,520 --> 00:02:33,280
次はこのアップデートされた情報を元に

55
00:02:30,959 --> 00:02:37,040
画面を描画します

56
00:02:33,280 --> 00:02:43,599
今度はプレイヤーキャラを x=100 y=103 の場所に描画するのです

58
00:02:40,560 --> 00:02:46,080
プレイヤーが「↓」キーを押し続けた場合

59
00:02:43,599 --> 00:02:55,519
私たちはキャラクターのY座標を106, 109, 112, 115というようにアップデートし続けます

61
00:02:52,640 --> 00:03:02,000
そしてアップデートされた座標を元にキャラクターを描画していくのです

63
00:02:58,640 --> 00:03:08,720
アップデートし、描画する。これをひたすら繰り返します。

65
00:03:04,400 --> 00:03:11,920
もしFPSが30なら

66
00:03:08,720 --> 00:03:18,720
このアップデート&描画を、1秒間に30回行います

68
00:03:14,239 --> 00:03:23,120
FPSが60なら、1秒間に60回です

70
00:03:19,920 --> 00:03:27,840
そしてこのアップデートと描画をするために、２つのメソッドを作成します

72
00:03:24,879 --> 00:03:30,400
ひとつはupdate

74
00:03:30,720 --> 00:03:38,879
もうひとつはpaintComponentです

76
00:03:40,959 --> 00:03:52,319
このpaintComponentというのはJavaに標準実装されているメソッドで、私のオリジナルではありません

78
00:03:46,879 --> 00:03:56,319
JPanel上に描画を行う際に使用するメソッドとなります

81
00:03:54,080 --> 00:04:00,560
描画方法は他にもあるのですが、今回はこのpaintComponentを使用することにします

83
00:03:59,680 --> 00:04:08,319
それからこのGraphicsクラスも使用し

85
00:04:04,319 --> 00:04:08,319
これを"g"として受け取ります

86
00:04:10,480 --> 00:04:15,040
それからこの行を追加します

90
00:04:18,400 --> 00:04:27,360
これはJPanel上でpaintComponentを使う際のフォーマットみたいなもので

93
00:04:25,280 --> 00:04:30,080
追加する必要があります

94
00:04:27,360 --> 00:04:35,680
この"super"というのは、このクラスの親クラスを意味していて

96
00:04:32,639 --> 00:04:38,320
この場合、親クラスはJPanelとなります

97
00:04:35,680 --> 00:04:41,360
GamePanelはJPanelのサブクラスですからね

98
00:04:38,320 --> 00:04:46,800
paintComponentが機能させるための決まりのようなもの、と考えて結構です

100
00:04:43,600 --> 00:04:50,160
というわけでこの２つのメソッドを作成しました

101
00:04:46,800 --> 00:04:52,800
今度はゲームループ内に戻って

103
00:04:51,600 --> 00:04:58,160
この２つのメソッドを呼びましょう

105
00:04:54,400 --> 00:05:00,000
まずupdateと書き

106
00:04:58,160 --> 00:05:02,800
続いてrepaintと書きます

108
00:05:03,680 --> 00:05:09,120
paintComponentではなくrepaintと書きます

110
00:05:07,280 --> 00:05:11,440
やや混乱しがちなところですが

111
00:05:09,120 --> 00:05:15,039
こう書くことでpaintComponentを呼ぶことができます

113
00:05:13,840 --> 00:05:21,680
というわけで、このゲームループが続く限り

115
00:05:18,160 --> 00:05:24,080
このupdateとrepaintが繰り返し実行されることになります

116
00:05:21,680 --> 00:05:28,720
アップデートして、再描画　アップデートして、再描画です

118
00:05:25,600 --> 00:05:32,080
試しになにか描画してみましょう

119
00:05:28,720 --> 00:05:36,080
そして描画にはこのpaintComponentと

121
00:05:33,199 --> 00:05:39,680
Graphicsクラスを使います

122
00:05:36,080 --> 00:05:44,240
このGraphicsというのはいわば絵筆のようなものです

125
00:05:41,840 --> 00:05:45,360
ただこのGraphicsを使用する前に

126
00:05:44,240 --> 00:05:52,800
これをGraphics2Dクラスに変換します

135
00:06:00,880 --> 00:06:10,960
これはGraphicsをGraphics2Dに変換したことを意味しています

138
00:06:07,840 --> 00:06:14,160
GraphicsとGraphics2Dというのは似たもので

139
00:06:10,960 --> 00:06:21,759
Graphicsでも描画はできるのですが、Graphics2Dのほうが多彩な機能を備えており

142
00:06:19,280 --> 00:06:29,120
このチュートリアルでも必要となる機能が含まれるため、今回はGraphics2Dを使用します

145
00:06:27,680 --> 00:06:33,360
最初に色を設定します

152
00:06:39,759 --> 00:06:45,919
とりあえず白を選びます

154
00:06:43,120 --> 00:06:48,479
画面上に四角形を描画してみましょう

160
00:06:53,120 --> 00:07:00,000
このfillRectメソッドを使って四角形を描画することができます

162
00:06:58,080 --> 00:07:03,840
画面上に描画する際は

163
00:07:00,000 --> 00:07:10,319
この四角形のX座標とY座標、

165
00:07:07,440 --> 00:07:15,759
そして幅と高さを設定する必要があります

167
00:07:13,280 --> 00:07:22,560
ひとまずx=100、y=100にして

170
00:07:20,800 --> 00:07:23,440
幅は…

172
00:07:23,440 --> 00:07:32,000
とりあえずこの四角形をプレイヤーキャラの代わりに使うつもりなので

174
00:07:29,360 --> 00:07:37,759
タイルサイズにしておきましょう

176
00:07:34,080 --> 00:07:37,759
なので48x48ですね

177
00:07:38,319 --> 00:07:47,520
幅も高さもタイルサイズです

179
00:07:42,880 --> 00:07:47,520
そして描画が終わったら

180
00:07:48,400 --> 00:07:53,759
このGraphics2Dをdispose（廃棄）します

182
00:07:51,840 --> 00:07:56,400
これをやらなくてもプログラムは動きますが

183
00:07:53,759 --> 00:08:01,440
リソースを節約するためにもやったほうがよいと思います

184
00:07:56,400 --> 00:08:01,440
では実行してみましょう

186
00:08:04,080 --> 00:08:17,599
x=100, y=100の位置に48x48の四角形を描画しました

191
00:08:14,479 --> 00:08:22,960
このようにGraphics2Dクラスを使うことで、描画をすることができます

193
00:08:19,360 --> 00:08:27,840
今度はこの四角形を動かしてみましょう

195
00:08:25,120 --> 00:08:31,880
そのためにはキーボード入力を受けつける必要があります

196
00:08:27,840 --> 00:08:41,440
プレイヤーがWASDキーを押すと、四角形が上下左右に移動する、といった感じに

199
00:08:38,640 --> 00:08:46,160
なのでキー入力を管理するクラスを作成しましょう

201
00:08:43,519 --> 00:08:48,560
このmainパッケージの中に

202
00:08:46,160 --> 00:08:53,120
クラスを作成し、KeyHandlerと名付けます

206
00:08:53,600 --> 00:08:58,720
そしてKeyListenerを組み込みます

211
00:09:06,959 --> 00:09:15,760
するとメソッドを追加するようにと言ってくるので

214
00:09:13,519 --> 00:09:18,480
keyTyped、keyPressed、keyReleasedを追加します

215
00:09:15,760 --> 00:09:25,200
KeyListenerを組み込む場合は、必ずこの３つのメソッドを使いする必要があるのです

218
00:09:23,120 --> 00:09:31,440
ただこのkeyTypedは使いません

221
00:09:29,519 --> 00:09:37,000
使うのはkeyPressedとkeyReleasedだけです

227
00:09:44,080 --> 00:09:54,880
このe.getKeyCOdeというのは、押されたキーに割り当てられた番号を返します

230
00:09:51,839 --> 00:09:56,080
なので…

234
00:10:02,640 --> 00:10:09,600
これは、もし押されたキーがWだったら…

235
00:10:07,839 --> 00:10:15,440
先にあと３つ追加しますか

242
00:10:19,839 --> 00:10:26,240
それからbooleanを作ります

253
00:10:40,399 --> 00:10:47,440
というわけで押されたキーがWなら…

263
00:11:08,480 --> 00:11:14,880
とりあえずこんな感じです

264
00:11:11,200 --> 00:11:17,519
今度はkeyReleasedです

265
00:11:14,880 --> 00:11:18,800
最初にkeyCodeを取得します

270
00:11:23,279 --> 00:11:30,000
コピペします

272
00:11:28,959 --> 00:11:37,519
今度はキーを押したときではなく、離したときの反応なので

274
00:11:33,040 --> 00:11:39,920
もし離されたキーがWであれば、upPressedをfalseにします

278
00:11:44,720 --> 00:11:49,200
こちらもfalseにします

279
00:11:47,519 --> 00:11:50,480
flaseじゃないですね

282
00:11:51,920 --> 00:12:01,680
これでKeyHandlerクラスはひとまず完了です

285
00:11:58,000 --> 00:12:01,680
GamePanelに戻りましょう

286
00:12:02,639 --> 00:12:08,079
KeyHandlerをインスタンス化します

290
00:12:16,720 --> 00:12:26,079
そしてKeyHandlerをこのGamePanelに追加します

295
00:12:29,519 --> 00:12:39,120
こうすることでGamePanelがキー入力を感知できるようになります

297
00:12:34,399 --> 00:12:40,560
それからもう一行追加します

304
00:12:49,200 --> 00:12:54,880
変数をいくつか作ります

316
00:13:10,320 --> 00:13:16,880
それからプレイヤーの移動速度を設定します

318
00:13:17,120 --> 00:13:23,920
ここは4にしておきます

319
00:13:21,040 --> 00:13:26,240
それからpaintComponentに行って

322
00:13:26,240 --> 00:13:31,360
この100、100の代わりに

323
00:13:29,360 --> 00:13:41,440
playerXとplayerYを入力します

327
00:13:36,720 --> 00:13:48,800
これで固定された数字ではなく、変数となったので、プレイヤーの位置を変えることができます

330
00:13:45,760 --> 00:13:50,240
ではどこでプレイヤーの位置を変えるのか？

331
00:13:48,800 --> 00:13:54,720
このupdateの中で行います

337
00:14:03,279 --> 00:14:10,880
keyHはKeyHandlerを意味します

338
00:14:06,720 --> 00:14:12,880
このupPressedがtrueの場合は

339
00:14:10,880 --> 00:14:19,360
キャラクターを上に動かします

345
00:14:24,399 --> 00:14:31,760
こういう風に書くこともできます

348
00:14:39,760 --> 00:14:46,000
こちらは短縮した書き方になります

349
00:14:42,880 --> 00:14:50,639
プレイヤーのY座標からプレイヤーの速度の値を引く形となります

355
00:15:00,399 --> 00:15:05,760
こちらは反対になります

374
00:15:44,639 --> 00:15:51,759
プレイヤー速度4というのは4ピクセルを意味します

376
00:15:49,759 --> 00:15:59,600
なのでプレイヤーがSキーを押した場合

378
00:15:56,480 --> 00:16:04,720
プレイヤーのY座標が4ピクセル増加することになります

380
00:16:00,800 --> 00:16:08,880
プレイヤーがキーを押すと

381
00:16:04,720 --> 00:16:11,360
その入力をKeyHandlerがキャッチし

382
00:16:08,880 --> 00:16:15,600
そしてこのupdateメソッドがプレイヤーの座標をアップデートし

384
00:16:14,240 --> 00:16:22,560
続いてこのpaintComponentが呼ばれ

387
00:16:19,920 --> 00:16:30,959
アップデートされたプレイヤーのX座標とY座標を元に四角形を描画します

390
00:16:28,160 --> 00:16:33,680
ただここに１つ問題があります

391
00:16:30,959 --> 00:16:35,600
なにが起きるかというと…

394
00:16:36,720 --> 00:16:42,880
例えばここでSキーを押すと

397
00:16:42,880 --> 00:16:51,040
四角形が消えてしまいます

399
00:16:46,959 --> 00:16:54,079
なにが起きたか説明します

400
00:16:51,040 --> 00:17:02,399
このゲームループではupdateとrepaintが繰り返されるわけですが

403
00:16:58,560 --> 00:17:09,600
そのアップデートと描画を繰り返す速さを設定していないので

405
00:17:06,000 --> 00:17:14,240
コンピューターは全力の速さでこの処理を実行することになります

407
00:17:11,679 --> 00:17:17,120
今は１つの四角形を描画しているだけなので

408
00:17:14,240 --> 00:17:23,360
現代のCPUからすれば非常に軽い処理となります

410
00:17:20,319 --> 00:17:29,760
なのでこの程度の処理であれば、１秒間に百万回以上実行できると思います

413
00:17:26,319 --> 00:17:32,960
そのためこのプログラムを実行中にSキーを押すと

414
00:17:29,760 --> 00:17:38,559
四角形は1秒間で数百万ピクセル分も移動してしまうことになります

416
00:17:36,160 --> 00:17:43,919
このウインドウの大きさは数百ピクセルしかないので

418
00:17:40,799 --> 00:17:46,559
一瞬でフレームの外に出てしまうというわけです

419
00:17:43,919 --> 00:17:50,960
これが四角形が消えたように見えた理由です

421
00:17:50,160 --> 00:17:59,919
そのため、ある種の「制限」を設定する必要があります

424
00:17:56,240 --> 00:18:03,520
要はプログラムに対して命令するわけです

425
00:17:59,919 --> 00:18:10,480
「そう急ぐな、アップデートと描画は1秒間に60回だけやればいい。それ以上は必要ない」と

427
00:18:07,280 --> 00:18:14,880
そのためにはまず、現在の時間を確かめる必要があります

429
00:18:11,679 --> 00:18:17,600
それからプログラム実行中にどれくらい時間が経過したかも

430
00:18:14,880 --> 00:18:23,360
つまりこのupdateとrepaintの間に経過する時間です

432
00:18:20,240 --> 00:18:29,840
これがわかれば、いつアップデートして、いつ描画すべきかがわかります

435
00:18:30,960 --> 00:18:36,400
現在の時間を調べるにはこのように入力します

443
00:18:45,200 --> 00:18:52,320
nanosecond（ナノ秒）を使って、現在のシステム時間を取得します

445
00:18:50,240 --> 00:19:02,559
ナノは非常に小さな単位で、10億ナノ秒が1秒と同じ長さです

448
00:18:59,840 --> 00:19:02,559
こういう方法もあります

449
00:19:08,960 --> 00:19:17,120
こちらは現在の時間をミリ秒で返します

451
00:19:15,120 --> 00:19:21,039
これでもよいのですが

452
00:19:17,120 --> 00:19:21,039
ナノの方がより精密です

453
00:19:21,600 --> 00:19:26,880
例を使って説明します

456
00:19:30,400 --> 00:19:33,200
現在の時間を表示してみましょう

458
00:19:36,960 --> 00:19:39,840
では実行してみます

460
00:19:44,720 --> 00:19:53,760
これが現在のシステム時間をナノ秒で表したものです

462
00:19:50,799 --> 00:19:56,480
見ての通り、時間が増加し続けています

463
00:19:53,760 --> 00:20:00,960
このように入力することで、現在の時間を知ることができるのです

465
00:20:04,400 --> 00:20:13,200
次にこのゲームのFPSを設定しましょう

466
00:20:10,000 --> 00:20:19,760
60FPSあれば十分だと思うので、60にします

469
00:20:17,679 --> 00:20:21,919
この後に…

474
00:20:29,440 --> 00:20:33,080
これは消しましょう

475
00:20:36,080 --> 00:20:43,039
ここでちょっと複雑なパートになります

476
00:20:39,440 --> 00:20:47,520
どうやって制限を設定し、60FPSを実現するのか？

478
00:20:45,679 --> 00:20:54,400
適切なゲームループの作成方法はいろいろあるのですが

480
00:20:51,120 --> 00:20:57,919
ここでは２種類のメジャーな方法を紹介します

481
00:20:54,400 --> 00:21:02,880
両方とも広く使われているもので

483
00:20:58,960 --> 00:21:05,679
私も両方試しましたが、どちらも問題なく機能しました

484
00:21:02,880 --> 00:21:10,240
なのでどちらを使っても大丈夫です

486
00:21:07,440 --> 00:21:14,840
１つ目はいわゆる"スリープ"メソッドです

488
00:21:12,000 --> 00:21:19,760
まずこのwhileループの外に変数を作ります

495
00:21:26,880 --> 00:21:34,000
FPSで割ります

496
00:21:30,799 --> 00:21:37,679
ずごい数のゼロですね

497
00:21:34,000 --> 00:21:42,880
ゼロが9個で10億、つまりこれは1秒と同じです

500
00:21:40,640 --> 00:21:47,120
このゲームループではナノ秒を単位として使っているので

502
00:21:45,760 --> 00:21:53,360
これは1秒であり、10億ナノ秒でもあります

505
00:21:51,280 --> 00:22:01,440
最初はやや混乱するかもしれませんが、これも精密な計算のためです

508
00:21:58,640 --> 00:22:08,720
１秒を60で割るわけなので

511
00:22:05,760 --> 00:22:15,520
1,2,3,4,5,6,7... を60で割ると

514
00:22:13,919 --> 00:22:22,480
16.666666

516
00:22:17,600 --> 00:22:23,280
ナノ秒または…

517
00:22:22,480 --> 00:22:29,919
1割る60なので

519
00:22:25,840 --> 00:22:32,240
0.01666秒となります

520
00:22:29,919 --> 00:22:34,960
これが描画のインターバルです

521
00:22:32,240 --> 00:22:42,159
つまり0.016秒ごとに画面の描画を行うということです

523
00:22:37,960 --> 00:22:46,159
すなわち1秒間に60回描画する、ということになります

527
00:22:53,200 --> 00:22:58,080
次の変数です

538
00:23:10,640 --> 00:23:19,600
このSystem.nanotimeは現在の時間をナノ秒で返すと言いました

541
00:23:17,280 --> 00:23:25,760
たった今描画を実行した場合

543
00:23:22,799 --> 00:23:34,400
次に描画を実行するのは、現在の時間にdrawIntervalを足した時間となります

546
00:23:30,480 --> 00:23:35,120
つまり0.016秒後ということです

547
00:23:34,400 --> 00:23:40,159
よってプログラムに対して

549
00:23:37,360 --> 00:23:46,400
システム時間がこの時間に到達したら描画を実行しなさい、と命令することができます

554
00:23:46,400 --> 00:23:55,360
そしてこの後にゲームループが開始され

556
00:23:52,159 --> 00:23:59,440
プログラムはupdateとrepaintを実行します

558
00:23:57,600 --> 00:24:10,159
そしてこの時点で、いくらかの時間が経過しているはずです

563
00:24:07,279 --> 00:24:13,360
ここで知るべきことは

564
00:24:10,159 --> 00:24:15,120
このupdateとrepaintを終えた時点で

565
00:24:13,360 --> 00:24:20,559
次の描画時間までどれだけの時間が残っているか、ということです

568
00:24:18,559 --> 00:24:21,919
調べてみましょう

577
00:24:33,760 --> 00:24:40,880
nextDrawTimeから現在の時間を引きます

578
00:24:37,520 --> 00:24:47,360
これにより次の描画時間までに残された時間がわかります

580
00:24:44,559 --> 00:24:53,360
そしてこの残った時間分だけThreadを眠らせます

582
00:24:49,919 --> 00:24:53,360
このように書きます

588
00:25:04,000 --> 00:25:12,960
ただこのsleepメソッドはlongしか受けつけないので

590
00:25:10,080 --> 00:25:15,200
変数を変換します

591
00:25:12,960 --> 00:25:19,679
またtry&catchで囲む必要があります

593
00:25:20,400 --> 00:25:29,840
またこちらのremainingTimeもその中に移動させます

596
00:25:30,080 --> 00:25:36,880
この"sleep"というのはゲームループを停止させ

597
00:25:33,120 --> 00:25:41,279
スリープ時間が終わるまでなんの処理も実行されません

599
00:25:39,840 --> 00:25:46,640
ただここでもう１つ注意点があります

601
00:25:43,360 --> 00:25:49,360
この説明文に書かれているように

602
00:25:46,640 --> 00:25:53,679
このsleepメソッドはミリ秒しか受けつけません

604
00:25:51,919 --> 00:25:58,400
私たちはナノ秒で計算してきているので

606
00:25:57,120 --> 00:26:06,400
ここでナノ秒からミリ秒に変換する必要があります

612
00:26:16,480 --> 00:26:23,520
そのため、このremainingTimeを100万で割ります

614
00:26:20,799 --> 00:26:27,600
これによってremainintTimeをミリ秒で受け取ることができます

616
00:26:25,279 --> 00:26:29,760
ちょっとややこしいですが

617
00:26:27,600 --> 00:26:35,360
ナノ秒で計算してsleep方式を使う場合は必要な処理です

620
00:26:34,080 --> 00:26:39,679
それからこのif文も追加します

630
00:26:52,960 --> 00:27:03,200
もしupdateとrepaintでdrawInterval以上の時間がかかってしまった場合、

632
00:27:00,080 --> 00:27:06,559
割り当てられた時間を使い切ったため

633
00:27:03,200 --> 00:27:09,600
このThreadを眠らせる必要がなくなります

634
00:27:06,559 --> 00:27:13,600
なのでremainingTimeには0を設定します

636
00:27:11,200 --> 00:27:18,159
私たちが作るシンプルな2Dゲームでこのような事態は発生しないと思いますが、念のためです

639
00:27:18,159 --> 00:27:22,000
そして最後に

641
00:27:22,000 --> 00:27:29,440
スリープ時間が終わり、Threadが目覚めたら

643
00:27:25,679 --> 00:27:36,720
次の描画時間を設定します

646
00:27:32,840 --> 00:27:39,919
つまり現在の時間にdrawIntervalを足すわけです

648
00:27:41,120 --> 00:27:52,000
今から0.01666秒後… これが次の描画時間です

652
00:27:49,200 --> 00:27:55,039
これでゲームループは完成です

653
00:27:52,000 --> 00:27:55,039
実行してみましょう

654
00:27:56,159 --> 00:28:00,840
Sキーを押してみます

655
00:28:00,000 --> 00:28:03,919
Dキー

656
00:28:00,840 --> 00:28:07,200
Wキー、Aキー

657
00:28:03,919 --> 00:28:09,919
ゲームループは問題なく機能していますね

658
00:28:07,200 --> 00:28:12,640
これでキャラクターを動かせるようになりました

660
00:28:13,360 --> 00:28:19,520
これで次に進めるのですが

661
00:28:16,320 --> 00:28:21,520
その前にもう１つのゲームループを紹介させてください

662
00:28:19,520 --> 00:28:26,960
こちらは"デルタ"または"累積型"方式とでもいうものです

664
00:28:24,640 --> 00:28:30,799
こちらも非常に人気の高いゲームループとなります

666
00:28:29,600 --> 00:28:36,640
こっちはコメントアウトします

674
00:28:48,240 --> 00:28:54,559
FPSは同じですね

675
00:28:51,600 --> 00:28:59,600
ここでdeltaという変数を作ります

677
00:28:56,799 --> 00:29:01,600
初期値は0

685
00:29:13,520 --> 00:29:18,080
まず最初に入力を終わらせます

712
00:30:08,960 --> 00:30:13,520
こんな感じです。実行してみましょう

713
00:30:16,640 --> 00:30:22,080
こちらも問題なく機能しています

714
00:30:19,360 --> 00:30:25,440
ループの最初に現在の時間を調べます

716
00:30:24,240 --> 00:30:32,399
そしてこのcurrentTimeからlastTimeを引きます

719
00:30:30,080 --> 00:30:37,120
これによって経過した時間がわかります

721
00:30:34,720 --> 00:30:42,799
そしてこれをdrawIntervalで割り

723
00:30:39,679 --> 00:30:46,799
それをdeltaに加えます

724
00:30:42,799 --> 00:30:49,679
そしてlastTimeをcurrentTimeに更新します

725
00:30:46,799 --> 00:30:53,360
このif文ですが

726
00:30:49,679 --> 00:30:56,720
この1が描画間隔を表しています

728
00:30:54,640 --> 00:30:58,399
ここでやっているのは

729
00:30:56,720 --> 00:31:08,399
1ループごとに、経過時間をdrawIntervalで割った数字をdeltaに追加し

733
00:31:04,559 --> 00:31:12,799
このdeltaがdrawIntervalに到達した際に

735
00:31:09,840 --> 00:31:18,559
updateとrepaintを実行し、deltaをリセットします

737
00:31:15,919 --> 00:31:22,399
こうすることでdrawIntervalごとにアップデートと描画を実行できます

739
00:31:21,600 --> 00:31:30,880
これが本当に1秒間に60回描画しているか確かめるために

743
00:31:28,720 --> 00:31:34,080
FPSを表示してみます

744
00:31:30,880 --> 00:31:36,880
FPSを調べるために

745
00:31:34,080 --> 00:31:38,799
もう少し変数を追加します

753
00:31:48,240 --> 00:32:00,840
アップデートと描画が実行されるたびに、このdrawCountに1を追加します

758
00:32:00,880 --> 00:32:05,279
そしてtimerを増加します

763
00:32:13,200 --> 00:32:19,679
これは経過時間を意味します

764
00:32:16,320 --> 00:32:22,720
つまりループごとに経過時間をtimerに追加していきます

766
00:32:21,519 --> 00:32:32,080
そしてこのtimerが1秒に到達したときに

771
00:32:28,720 --> 00:32:35,519
1,2,3,4,5,6,7,8,9...

772
00:32:32,080 --> 00:32:35,519
10億ナノ秒

773
00:32:36,399 --> 00:32:39,840
FPSを表示します

777
00:32:42,799 --> 00:32:52,559
timerが1秒に到達するまでにupdateとrepaintを何回繰り返したか

780
00:32:50,000 --> 00:32:58,399
そしてここでdrawCountとtimerをリセットします

783
00:33:00,559 --> 00:33:04,480
では実行してみましょう

784
00:33:08,399 --> 00:33:11,840
こんな感じです

785
00:33:17,279 --> 00:33:24,480
プログラムが60FPSを維持していることがわかります

787
00:33:21,200 --> 00:33:30,480
つまり1秒間に60回、画面を描画しているということです

789
00:33:27,840 --> 00:33:30,480
ちゃんと機能していますね

790
00:33:31,600 --> 00:33:38,320
これでゲームループの作成は完了しました

792
00:33:35,919 --> 00:33:43,519
本チュートリアルでは、こちらのdelta式のゲームループを使って進めていきます

794
00:33:41,200 --> 00:33:47,919
とはいえsleep式のほうがよければそれで構いません

796
00:33:46,320 --> 00:33:50,399
どちらでも大丈夫です

797
00:33:47,919 --> 00:33:58,720
もうこのゲームループに変更を加えることはないので、どちらを選んでも問題なくこのチュートリアルを実行できます

800
00:33:55,919 --> 00:34:05,679
sleepよりdeltaのほうがよいという人の中には

803
00:34:03,039 --> 00:34:12,639
Threadのsleepメソッドというのは実は完全に正確ではなく

806
00:34:09,919 --> 00:34:18,399
数ミリ秒の誤差が生じるときもあると言う人もいますが

808
00:34:15,679 --> 00:34:21,359
私は正直さだかでありません

809
00:34:18,399 --> 00:34:22,720
どちらも試してみて

810
00:34:21,359 --> 00:34:30,079
自分のゲームに合う方を選んでもよいと思います

812
00:34:26,399 --> 00:34:32,800
さて複雑なパートはこれで終了です

813
00:34:30,079 --> 00:34:36,320
次回はプレイヤーキャラクターを作成し

814
00:34:32,800 --> 00:34:49,409
それを画面上に表示させていきます

816
00:34:37,570 --> 00:34:49,409
[Music]

