1
00:00:00,240 --> 00:00:06,799
hej allihopa det här är RyiSnow 

2
00:00:03,439 --> 00:00:08,720
från denna video kommer jag att starta en handledning i ett 2d spel i java

3
00:00:06,799 --> 00:00:14,920
det här är något som jag har velat göra ganska länge

5
00:00:11,679 --> 00:00:18,000
jag är glad att jag äntligen kan börja med det här

6
00:00:14,920 --> 00:00:27,439
jämfört med de andra spelhandledningarna som jag har gjort tidigare, till exempel det textbaserade äventyrsspelet,

9
00:00:24,320 --> 00:00:28,960
2d spelprogrammering är lite mer komplicerat

10
00:00:27,439 --> 00:00:31,679
och kräver lite mer arbete

11
00:00:28,960 --> 00:00:34,320
så jag kommer göra mitt bästa för att göra det så enkelt som möjligt

12
00:00:31,679 --> 00:00:40,719
så att du kan följa stegen även om du inte har någon erfarenhet i 2d spel utveckling

15
00:00:39,680 --> 00:00:45,920
det glädjer mig mycket om du gillar det

17
00:00:43,440 --> 00:00:52,160
för den här kommer vi inte att använda några externa bibliotek

19
00:00:49,039 --> 00:00:57,280
vi kommer bara använda standard java-klasser och skapa det från början

21
00:00:54,719 --> 00:01:00,320
om du har en miljö där du kan skriva java kod kan du göra det här spelet

23
00:00:59,280 --> 00:01:06,720
och här är en planering fär denna handledning

25
00:01:03,600 --> 00:01:11,360
först kommer vi göra ett relativt enkelt skattjaktspel

27
00:01:08,799 --> 00:01:18,080
genom att skapa detta kan du lära dig hur man gör en game loop, vilket är kärnan i 2d spel utveckling

29
00:01:14,960 --> 00:01:26,560
och även hur man visar karaktärer, bakgrundsbrickor och objekt på skärmen.

32
00:01:23,840 --> 00:01:32,960
och du kan också lära dig hur spelaren rör runt på skärmen

34
00:01:29,759 --> 00:01:38,840
och efter att du har gjort klart första spelet kommer vi lägga till mer element

36
00:01:35,759 --> 00:01:47,360
och ändra det till ett 2d action rpg spel ungefär som en Zeldra i retrostil

38
00:01:43,040 --> 00:01:55,040
vi kommer lägga till monster, npc, dialoger, inventory, några händelser, sådana saker

41
00:01:51,520 --> 00:01:59,119
det är vårt slutmål med denna handledning

42
00:01:55,040 --> 00:02:01,439
det här är en handledning för java 2d nybörjare

43
00:01:59,119 --> 00:02:08,319
så jag kommer förklara många saker som hur game loopen fungerar, o.s.v

45
00:02:04,799 --> 00:02:14,640
I fall du redan har lite erfarenhet inom 2d spel utveckling

47
00:02:11,039 --> 00:02:17,040
kommer du säker känna av att tempot är ganska långsam

49
00:02:16,160 --> 00:02:21,520
men snälla ha tålamod med mig

51
00:02:18,640 --> 00:02:23,920
alla är nybörjare i början

52
00:02:21,520 --> 00:02:30,000
och någon annan kommer säkert tycka att dessa förklaringar är hjälpsamma

54
00:02:26,640 --> 00:02:34,840
okej det där var introduktionen och nu, låt oss börja utvecklingen

56
00:02:32,560 --> 00:02:38,879
låt oss skapa ett nytt projekt

58
00:02:36,480 --> 00:02:45,120
och jag kommer kalla det för My2DGame

60
00:02:40,879 --> 00:02:48,800
det är typ det mest generiska namnet någonsin men det är okej

62
00:02:46,959 --> 00:02:52,959
och skapa inte

63
00:02:48,800 --> 00:02:58,159
låt oss skapa en package och namnge det till main

65
00:02:55,440 --> 00:03:02,760
och skapa en klass

66
00:02:58,159 --> 00:03:02,760
låt oss skapa main klassen

68
00:03:06,720 --> 00:03:12,800
så först skapar vi ett fönster 

70
00:03:10,239 --> 00:03:14,159
vi använder JFrame klassen

77
00:03:32,799 --> 00:03:38,319
så att vi kan stänga fönstret korrekt

78
00:03:35,280 --> 00:03:43,120
och vi lägger också till

80
00:03:40,720 --> 00:03:48,640
en grej som inte tillåter förändringar till denna fönster

82
00:03:45,120 --> 00:03:52,000
låt oss sedan ange speltiteln
then let's set the game title

84
00:03:52,080 --> 00:04:02,720
typ 2d adventure eller något
so like 2D adventure eller något

92
00:04:08,799 --> 00:04:16,720
fönstret kommer att visas i mitten av skärmen

96
00:04:18,560 --> 00:04:26,240
så att vi kan se fönstret

97
00:04:21,440 --> 00:04:26,240
okej låt oss nu skapa en till klass

98
00:04:27,040 --> 00:04:32,320
och jag kommer att namnge det game panel

100
00:04:33,199 --> 00:04:40,160
och game panel utökar sig av JPanel

103
00:04:41,520 --> 00:04:50,639
så detta är i princip en delklass av JPanel

105
00:04:47,360 --> 00:04:53,759
den har alla funktioner som JPanel

106
00:04:50,639 --> 00:04:58,000
game panel fungerar typ som en spelskärm
108
00:04:55,759 --> 00:05:07,440
så först kommer vi bestämma några skärm inställningar

112
00:05:03,919 --> 00:05:08,479
och skapa några variabler här

117
00:05:14,479 --> 00:05:18,639
och jag kommer välja 16

118
00:05:19,520 --> 00:05:28,880
så detta betyder 16x16 bricka

119
00:05:25,039 --> 00:05:36,000
och den här 16x16 kommer vara den vanliga storleken av spelarens karaktär, npcs och kartbrickor i spelet

121
00:05:32,160 --> 00:05:42,800
så 16x16 är ungerfär en standard storlek för många retro 2d spel

123
00:05:39,520 --> 00:05:46,000
och många karaktärer och brickor är skapade med den här storleken

124
00:05:42,800 --> 00:05:48,639
du kan hitta många exempel

125
00:05:46,000 --> 00:05:56,639
några spel använder mer pixlar som 32x32 för att rita en karaktär

127
00:05:52,160 --> 00:05:59,840
men vi kör med 16 pixlar den här gången

128
00:05:56,639 --> 00:06:00,800
nu när det är sagt, det finns en liten hake här

129
00:05:59,840 --> 00:06:15,840
since modern computers and monitors have much higher resolutions than those eras of nes or snes you know 80s 90s
eftersom moderna datorer och monitorer har mycket högre resolutioner än de där tiderna av nes eller snes, du vet 80-talet eller 90-talet 

133
00:06:10,800 --> 00:06:23,240
så 16x16 karaktärer ser mycket små ut på skärmen

136
00:06:17,759 --> 00:06:30,479
till exempel nes resolution var 256x224 

138
00:06:24,960 --> 00:06:31,199
och genesis var 320x224

139
00:06:30,479 --> 00:06:39,680
16x16 karaktärer såg ut att vara en anständig storek ut i de miljöerna

142
00:06:37,039 --> 00:06:43,120
men jag är säker att din monitor har mycket större resolution än det

143
00:06:39,680 --> 00:06:45,199
vad ska göras nu?

144
00:06:43,120 --> 00:06:48,800
vi kommer förstora det

145
00:06:45,199 --> 00:06:52,400
låt oss skapa en heltals variabel

147
00:06:52,400 --> 00:06:58,880
och jag kommer sätta det till 3

148
00:06:55,120 --> 00:07:02,880
även om vi skapar karaktärerna i en 16x16 ram

149
00:06:58,880 --> 00:07:10,080
men på skärmen ser det ut som 48x48 pixlar

152
00:07:07,120 --> 00:07:17,360
den här stilen av förstoring är ganska vanlig inom utveckling av 2d spel i retrostil

154
00:07:14,240 --> 00:07:21,280
vi följer också traditionen

155
00:07:17,360 --> 00:07:23,520
en till heltal

163
00:07:33,599 --> 00:07:42,560
I princip är detta en 48x48 bricka

165
00:07:39,199 --> 00:07:48,080
det här är den aktuella brick storleken som kommer visas på våran spelskärm

167
00:07:44,960 --> 00:07:51,120
och sedan bestämmer vi storleken av vårat spel

168
00:07:48,080 --> 00:08:02,720
och för att göra det måste vi först bestämma hur många brickor spelet kan visa, både horisontellt och vertikalt

172
00:07:59,199 --> 00:08:05,759
och det här kommer bestämma hela skärm storleken

177
00:08:09,440 --> 00:08:15,440
i spelet väljer vi 16 kolumner och
in this game we choose 16 column and

183
00:08:24,720 --> 00:08:31,680
och raderna är 12

185
00:08:28,720 --> 00:08:35,279
16 brickor horisontellt 12 brickor vertikalt

186
00:08:31,680 --> 00:08:40,959
förhållandet är 4:3

188
00:08:38,000 --> 00:08:43,839
och eftersom en enständig bricka är 48 pixlar

207
00:09:14,560 --> 00:09:21,839
brick storleken är 48

213
00:09:30,800 --> 00:09:35,040
och höjden är

220
00:09:44,240 --> 00:09:50,000
det här kommer bli storleken av våran spelskärm
so this will be the size of our game screen

221
00:09:47,600 --> 00:09:52,800
men du kan såklart ändra det om du vill

223
00:09:51,519 --> 00:09:56,399
så typ, jag vet inte,

225
00:09:54,080 --> 00:10:00,959
18 eller 14 eller något

228
00:10:01,040 --> 00:10:07,920
sedan kommer den här skärm bredden och skärm höjden att ändras automatiskt

230
00:10:06,000 --> 00:10:11,040
det där är skärm inställningen

231
00:10:07,920 --> 00:10:16,040
låt oss nu skapa en konstruktor av denna game panel

234
00:10:21,680 --> 00:10:26,800
inte game pain, game panel

236
00:10:24,720 --> 00:10:29,120
och först

240
00:10:35,680 --> 00:10:41,519
så vi kommer ställa in panel storleken av denna spel panelen

242
00:10:40,000 --> 00:10:47,640
så skärm bredd och skärm höjd

245
00:10:49,600 --> 00:10:57,360
och jag är inte säker om det här är nödvändigt men

247
00:10:54,640 --> 00:11:03,720
ja, låt oss sätta bakgrundsfärgen av spelpanelen

254
00:11:15,120 --> 00:11:23,600
i fall du har erfarenhet inom 2d spel utveckling förut

255
00:11:17,760 --> 00:11:28,320
och i fall du har använt kanvas för att rita skärmen

258
00:11:24,959 --> 00:11:29,839
så behöver du säkerligen buffer strategy också

259
00:11:28,320 --> 00:11:32,560
men den här gången kommer vi använda jpanel

260
00:11:29,839 --> 00:11:38,320
den här jpanelen har någon typ av dubbel buffering funktion som standard

262
00:11:36,079 --> 00:11:46,079
så jag tror att det är en bra idé att göra detta sant för bättre renderingsprestanda.

265
00:11:44,079 --> 00:11:52,720
okej låt oss nu gå tillbaka till main klassen

267
00:11:48,000 --> 00:11:52,720
och lägg till game panel till det här fönstret
and add this game panel to this window

272
00:12:02,399 --> 00:12:08,560
och vi kommer lägga till game panel till det här fönstret

275
00:12:12,000 --> 00:12:17,360
ja så det här är en delklass av jpanel

276
00:12:14,880 --> 00:12:23,760
så i princip är detta en jpanel klass med lite fler extra funktioner.

278
00:12:20,800 --> 00:12:29,360
så du kan lägga till fönstret som du lägger till jpanel till fönstret

280
00:12:26,639 --> 00:12:39,839
och sedan kommer vi packa jpanel så att vi kan se den

284
00:12:37,200 --> 00:12:41,760
okej låt oss kontrollera det

285
00:12:39,839 --> 00:12:42,560
okej

286
00:12:41,760 --> 00:12:47,360
så våran spel skärm visas upp

288
00:12:45,120 --> 00:12:53,279
och storleken är 768 och 576

291
00:12:49,800 --> 00:13:03,600
så vi kan visa 16 48x48 brickor horisontellt

294
00:12:58,480 --> 00:13:06,480
och 12 48x48 brickor vertikalt

295
00:13:03,600 --> 00:13:13,040
så nu har vi ett fönster, låt oss prata om de enkla mekanikerna av spelet

297
00:13:09,839 --> 00:13:22,079
jag tror det mest viktigaste konceptet av 2d spel är existensen av tid

300
00:13:19,519 --> 00:13:25,279
i mitt tidigare text äventyr spel

301
00:13:22,079 --> 00:13:29,040
när du gör något, som till exempel, trycker på knappen

303
00:13:26,399 --> 00:13:34,959
programmet gör då någon process och sedan slutar

305
00:13:32,639 --> 00:13:39,839
den väntar bara tills du gör något igen, som till exempel, trycker på knappen igen
it just wait until you do something again like pressing the button again

307
00:13:38,560 --> 00:13:43,760
hursomhelst

308
00:13:39,839 --> 00:13:47,440
i 2d spel, när du börjar programmet,

309
00:13:43,760 --> 00:13:54,880
programmet fortsätter köras och slutar inte tills du förmodligen stänger spelet

311
00:13:50,800 --> 00:13:57,760
eller om du gör något speciellt

312
00:13:54,880 --> 00:14:05,760
så tänk dig att du spelar spel som super mario eller minecraft eller call of duty

314
00:14:01,519 --> 00:14:07,920
eller något annat action-orienterade spel

315
00:14:05,760 --> 00:14:12,639
du kan röra runt spelaren på skärmen

317
00:14:09,760 --> 00:14:18,560
och andra karaktärer som monster eller npc rör också på sig på skärmen

319
00:14:17,760 --> 00:14:23,680
men hur kan det hända?

321
00:14:20,240 --> 00:14:31,120
dens mekaniker är ungefär detsamma med handritna animationer

323
00:14:27,040 --> 00:14:33,760
karaktären är faktiskt en kollektion av statiska bilder

324
00:14:31,120 --> 00:14:37,600
men eftersom den uppdaterar bilderna riktigt snabbt

326
00:14:34,720 --> 00:14:40,079
ser det ut som att karaktären rör på sig

327
00:14:37,600 --> 00:14:43,920
it's the same in video games
det är samma sak i videospel

328
00:14:40,079 --> 00:14:47,040
so om spelets fps är 60

329
00:14:43,920 --> 00:14:50,639
vilket betyder att den uppdaterar skärmen 60 gånger per sekund

331
00:14:48,240 --> 00:14:58,160
ser din karaktär ut som om den rör på sig men det är faktiskt en serie av 60 statiska bilder

334
00:14:55,360 --> 00:15:04,880
för att göra den här animationen i vårat spel behöver vi skapa tid i vårt spel

336
00:15:01,760 --> 00:15:08,079
så vi måste börja med en spelklocka

337
00:15:04,880 --> 00:15:17,440
och för att göra det måste vi använda en klass som kallas för thread

340
00:15:13,120 --> 00:15:21,600
och jag kommer namnge detta till game thread

341
00:15:17,440 --> 00:15:22,880
thread är någonting du kan starta och stoppa

342
00:15:21,600 --> 00:15:30,560
och när en thread har startat, fortsätter den köra ditt program tills du avslutar den

346
00:15:28,160 --> 00:15:36,160
det är inte som en thread av sig själv gör något speciellt

348
00:15:33,440 --> 00:15:40,160
men sen måste du repetera någon process om och om igen

350
00:15:37,279 --> 00:15:43,360
som att rita på skärmen 60 gånger per varje sekund

351
00:15:40,160 --> 00:15:45,920
thread är mycket hjälpsam

352
00:15:43,360 --> 00:15:49,120
vi kommer använda den här threaden i den här game panelen

353
00:15:45,920 --> 00:15:59,440
och för att köra en thread måste vi implementera runnable till denna klass

356
00:15:56,880 --> 00:16:02,959
det är kärnan för att använda thread

358
00:16:01,680 --> 00:16:07,360
och vi ser någon error

360
00:16:05,120 --> 00:16:14,639
så den föreslår att lägga till en oimplementerade metod, låt oss göra det

362
00:16:11,120 --> 00:16:17,120
sedan genererar den automatiskt den här run-metoden

364
00:16:17,920 --> 00:16:24,399
så vad denna run-metod är

365
00:16:20,839 --> 00:16:25,199
du kan säkert se den här förklaringen

367
00:16:25,199 --> 00:16:30,399
så den säger

368
00:16:27,680 --> 00:16:39,519
när ett objekt implementerar interfacet runnable, i detta fall, våran game panel, används det för att skapa en thread

371
00:16:36,720 --> 00:16:47,360
när threaden startas kallas objektets körmetod i den separata exekveringstråden

374
00:16:44,320 --> 00:16:52,959
så när vi startar den här game threaden, kllar den automatiskt run-metoden

376
00:16:50,399 --> 00:16:56,399
det är på så sett den fungerar

377
00:16:52,959 --> 00:17:01,759
okej så jag kommer skapa en ny metod här

381
00:17:06,240 --> 00:17:10,319
och här

382
00:17:07,679 --> 00:17:12,160
vi kommer instansiera den här spel threaden

388
00:17:17,600 --> 00:17:27,919
och vi kommer passera "detta" till thread konstruktören

392
00:17:25,360 --> 00:17:30,400
så det betyder att denna klass, alltså game panel

393
00:17:27,919 --> 00:17:35,679
vi passerar game panel klassen till den här threads konstruktor

395
00:17:33,039 --> 00:17:37,360
och det är på så sätt du instansierar thread

397
00:17:37,360 --> 00:17:44,400
låt oss starta den här threaden igen

399
00:17:44,400 --> 00:17:50,960
den kommer automatiskt kalla den här run-metoden

402
00:17:51,600 --> 00:18:12,550
och inom den här run-metoden kommer vi skapa en game loop vilket kommer vara kärnan av vårat spel

406
00:18:00,710 --> 00:18:12,550
[Music]

